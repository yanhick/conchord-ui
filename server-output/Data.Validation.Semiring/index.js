// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Control_Alt = require("../Control.Alt");
var Control_Plus = require("../Control.Plus");
var Control_Alternative = require("../Control.Alternative");
var Data_Eq = require("../Data.Eq");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Show = require("../Data.Show");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Functor = require("../Data.Functor");
var Control_Apply = require("../Control.Apply");
var Data_Semiring = require("../Data.Semiring");
var Control_Applicative = require("../Control.Applicative");
var Valid = (function () {
    function Valid(value0) {
        this.value0 = value0;
    };
    Valid.create = function (value0) {
        return new Valid(value0);
    };
    return Valid;
})();
var Invalid = (function () {
    function Invalid(value0) {
        this.value0 = value0;
    };
    Invalid.create = function (value0) {
        return new Invalid(value0);
    };
    return Invalid;
})();
var unV = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Invalid) {
                return v(v2.value0);
            };
            if (v2 instanceof Valid) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Validation.Semiring line 41, column 1 - line 41, column 30: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var showV = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            if (v instanceof Invalid) {
                return "Invalid (" + (Data_Show.show(dictShow)(v.value0) + ")");
            };
            if (v instanceof Valid) {
                return "Valid (" + (Data_Show.show(dictShow1)(v.value0) + ")");
            };
            throw new Error("Failed pattern match at Data.Validation.Semiring line 65, column 3 - line 66, column 3: " + [ v.constructor.name ]);
        });
    };
};
var isValid = function (v) {
    if (v instanceof Valid) {
        return true;
    };
    return false;
};
var invalid = Invalid.create;
var functorV = new Data_Functor.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Invalid) {
            return new Invalid(v1.value0);
        };
        if (v1 instanceof Valid) {
            return new Valid(v(v1.value0));
        };
        throw new Error("Failed pattern match at Data.Validation.Semiring line 69, column 3 - line 69, column 36: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var eqV = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (v) {
            return function (v1) {
                if (v instanceof Invalid && v1 instanceof Invalid) {
                    return Data_Eq.eq(dictEq)(v.value0)(v1.value0);
                };
                if (v instanceof Valid && v1 instanceof Valid) {
                    return Data_Eq.eq(dictEq1)(v.value0)(v1.value0);
                };
                return false;
            };
        });
    };
};
var ordV = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqV(dictOrd["__superclass_Data.Eq.Eq_0"]())(dictOrd1["__superclass_Data.Eq.Eq_0"]());
        }, function (v) {
            return function (v1) {
                if (v instanceof Invalid && v1 instanceof Invalid) {
                    return Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                };
                if (v instanceof Invalid) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Valid && v1 instanceof Valid) {
                    return Data_Ord.compare(dictOrd1)(v.value0)(v1.value0);
                };
                if (v instanceof Valid) {
                    return Data_Ordering.GT.value;
                };
                throw new Error("Failed pattern match at Data.Validation.Semiring line 59, column 3 - line 59, column 60: " + [ v.constructor.name, v1.constructor.name ]);
            };
        });
    };
};
var applyV = function (dictSemiring) {
    return new Control_Apply.Apply(function () {
        return functorV;
    }, function (v) {
        return function (v1) {
            if (v instanceof Invalid && v1 instanceof Invalid) {
                return new Invalid(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0));
            };
            if (v instanceof Invalid) {
                return new Invalid(v.value0);
            };
            if (v1 instanceof Invalid) {
                return new Invalid(v1.value0);
            };
            if (v instanceof Valid && v1 instanceof Valid) {
                return new Valid(v.value0(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Validation.Semiring line 73, column 3 - line 73, column 62: " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var applicativeV = function (dictSemiring) {
    return new Control_Applicative.Applicative(function () {
        return applyV(dictSemiring);
    }, Valid.create);
};
var altV = function (dictSemiring) {
    return new Control_Alt.Alt(function () {
        return functorV;
    }, function (v) {
        return function (v1) {
            if (v instanceof Invalid && v1 instanceof Invalid) {
                return new Invalid(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0));
            };
            if (v instanceof Invalid) {
                return v1;
            };
            if (v instanceof Valid) {
                return new Valid(v.value0);
            };
            throw new Error("Failed pattern match at Data.Validation.Semiring line 82, column 3 - line 82, column 60: " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var plusV = function (dictSemiring) {
    return new Control_Plus.Plus(function () {
        return altV(dictSemiring);
    }, new Invalid(Data_Semiring.zero(dictSemiring)));
};
var alernativeV = function (dictSemiring) {
    return new Control_Alternative.Alternative(function () {
        return applicativeV(dictSemiring);
    }, function () {
        return plusV(dictSemiring);
    });
};
module.exports = {
    invalid: invalid, 
    isValid: isValid, 
    unV: unV, 
    eqV: eqV, 
    ordV: ordV, 
    showV: showV, 
    functorV: functorV, 
    applyV: applyV, 
    applicativeV: applicativeV, 
    altV: altV, 
    plusV: plusV, 
    alernativeV: alernativeV
};
