// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Control_Alt = require("../Control.Alt");
var Data_Foreign_Class = require("../Data.Foreign.Class");
var Data_String = require("../Data.String");
var Data_Array = require("../Data.Array");
var Data_List = require("../Data.List");
var Data_Int = require("../Data.Int");
var Data_Maybe = require("../Data.Maybe");
var Data_Functor = require("../Data.Functor");
var Data_Generic = require("../Data.Generic");
var Data_Foreign_Generic = require("../Data.Foreign.Generic");
var Test_StrongCheck_Arbitrary = require("../Test.StrongCheck.Arbitrary");
var Test_StrongCheck_Generic = require("../Test.StrongCheck.Generic");
var Text_Parsing_StringParser = require("../Text.Parsing.StringParser");
var Text_Parsing_StringParser_String = require("../Text.Parsing.StringParser.String");
var Text_Parsing_StringParser_Combinators = require("../Text.Parsing.StringParser.Combinators");
var Parser = require("../Parser");
var Control_Apply = require("../Control.Apply");
var Data_Unit = require("../Data.Unit");
var Data_Show = require("../Data.Show");
var Data_Eq = require("../Data.Eq");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Function = require("../Data.Function");
var Control_Bind = require("../Control.Bind");
var Control_Applicative = require("../Control.Applicative");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Year = function (x) {
    return x;
};
var Intro = (function () {
    function Intro() {

    };
    Intro.value = new Intro();
    return Intro;
})();
var Chorus = (function () {
    function Chorus() {

    };
    Chorus.value = new Chorus();
    return Chorus;
})();
var Verse = (function () {
    function Verse() {

    };
    Verse.value = new Verse();
    return Verse;
})();
var Outro = (function () {
    function Outro() {

    };
    Outro.value = new Outro();
    return Outro;
})();
var Bridge = (function () {
    function Bridge() {

    };
    Bridge.value = new Bridge();
    return Bridge;
})();
var SongMeta = function (x) {
    return x;
};
var InsideWord = (function () {
    function InsideWord(value0) {
        this.value0 = value0;
    };
    InsideWord.create = function (value0) {
        return new InsideWord(value0);
    };
    return InsideWord;
})();
var BetweenWord = (function () {
    function BetweenWord(value0) {
        this.value0 = value0;
    };
    BetweenWord.create = function (value0) {
        return new BetweenWord(value0);
    };
    return BetweenWord;
})();
var ChordAndLyric = (function () {
    function ChordAndLyric(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ChordAndLyric.create = function (value0) {
        return function (value1) {
            return new ChordAndLyric(value0, value1);
        };
    };
    return ChordAndLyric;
})();
var OnlyChord = (function () {
    function OnlyChord(value0) {
        this.value0 = value0;
    };
    OnlyChord.create = function (value0) {
        return new OnlyChord(value0);
    };
    return OnlyChord;
})();
var OnlyLyric = (function () {
    function OnlyLyric(value0) {
        this.value0 = value0;
    };
    OnlyLyric.create = function (value0) {
        return new OnlyLyric(value0);
    };
    return OnlyLyric;
})();
var SongSection = function (x) {
    return x;
};
var SongContent = function (x) {
    return x;
};
var Song = function (x) {
    return x;
};
var DBSong = function (x) {
    return x;
};
var serializeSongSectionName = function (v) {
    if (v instanceof Intro) {
        return "Intro";
    };
    if (v instanceof Chorus) {
        return "Chorus";
    };
    if (v instanceof Verse) {
        return "Verse";
    };
    if (v instanceof Outro) {
        return "Outro";
    };
    if (v instanceof Bridge) {
        return "Bridge";
    };
    throw new Error("Failed pattern match at Model line 105, column 1 - line 106, column 1: " + [ v.constructor.name ]);
};
var serializeSongMeta = function (v) {
    return v.title + ("\n" + (v.artist + ("\n" + (Data_Show.show(Data_Show.showInt)(v.year) + ("\n" + (v.album + "\n"))))));
};
var serializeChordPlacement = function (v) {
    if (v instanceof BetweenWord) {
        return "/" + (Data_Show.show(Parser.showSongChord)(v.value0) + "/ ");
    };
    if (v instanceof InsideWord) {
        return "/" + (Data_Show.show(Parser.showSongChord)(v.value0) + "\\");
    };
    throw new Error("Failed pattern match at Model line 171, column 1 - line 172, column 1: " + [ v.constructor.name ]);
};
var serializeSongLyric = function (v) {
    if (v instanceof ChordAndLyric) {
        return serializeChordPlacement(v.value0) + v.value1;
    };
    if (v instanceof OnlyLyric) {
        return "| " + v.value0;
    };
    if (v instanceof OnlyChord) {
        return "\\" + (Data_Show.show(Parser.showSongChord)(v.value0) + "\\ ");
    };
    throw new Error("Failed pattern match at Model line 166, column 1 - line 166, column 82: " + [ v.constructor.name ]);
};
var serializeSongSection = function (v) {
    return serializeSongSectionName(v.name) + ("\n" + (Data_String.joinWith("")(Data_Functor.map(Data_Functor.functorArray)(serializeSongLyric)(v.lyrics)) + "\n\n"));
};
var serializeSongContent = function (v) {
    return Data_Function.apply(Data_String.joinWith(""))(Data_Functor.map(Data_Functor.functorArray)(serializeSongSection)(v));
};
var serializeSong = function (v) {
    return serializeSongMeta(v.meta) + ("\n" + serializeSongContent(v.content));
};
var parseSongSectionName = Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("Intro"))(Intro.value))(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("Chorus"))(Chorus.value)))(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("Verse"))(Verse.value)))(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("Outro"))(Outro.value)))(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("Bridge"))(Bridge.value));
var parseOnlyChord = function (end) {
    return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String.string("\\"))(function () {
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Parser.parseChord)(function (v) {
            return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String.string("\\ "))(function () {
                return Data_Function.apply(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser))(new OnlyChord(v));
            });
        });
    });
};
var parseNewline = Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser_String.string("\r\n"))(Text_Parsing_StringParser_String.string("\n"));
var parseSongMeta = (function () {
    var untilNewline = function (p) {
        return Text_Parsing_StringParser_Combinators.manyTill(p)(parseNewline);
    };
    var charsToString = function ($186) {
        return Data_String.fromCharArray(Data_Array.fromFoldable(Data_List.foldableList)($186));
    };
    return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(untilNewline(Text_Parsing_StringParser_String.anyChar))(function (v) {
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(untilNewline(Text_Parsing_StringParser_String.anyChar))(function (v1) {
            return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(untilNewline(Text_Parsing_StringParser_String.anyDigit))(function (v2) {
                return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(untilNewline(Text_Parsing_StringParser_String.anyChar))(function (v3) {
                    return Data_Function.apply(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser))({
                        title: charsToString(v), 
                        artist: charsToString(v1), 
                        year: Data_Function.apply(Year)(Data_Maybe.fromMaybe(0)(Data_Function.apply(Data_Int.fromString)(charsToString(v2)))), 
                        album: charsToString(v3)
                    });
                });
            });
        });
    });
})();
var parseLyric = function (l) {
    return Data_Function.apply(function ($187) {
        return Data_String.fromCharArray(Data_Array.fromFoldable(Data_List.foldableList)($187));
    })(l);
};
var parseOnlyLyric = function (end) {
    return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String.string("| "))(function () {
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.manyTill(Text_Parsing_StringParser_String.anyChar)(end))(function (v) {
            return Data_Function.apply(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser))(Data_Function.apply(OnlyLyric.create)(parseLyric(v)));
        });
    });
};
var parseChordPlacement = (function () {
    var parseInsideWord = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String.string("/"))(function () {
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Parser.parseChord)(function (v) {
            return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String.string("\\"))(function () {
                return Data_Function.apply(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser))(new InsideWord(v));
            });
        });
    });
    var parseBetweenWord = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String.string("/"))(function () {
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Parser.parseChord)(function (v) {
            return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String.string("/ "))(function () {
                return Data_Function.apply(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser))(new BetweenWord(v));
            });
        });
    });
    return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser["try"](parseBetweenWord))(parseInsideWord);
})();
var parseChordAndLyric = function (end) {
    return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(parseChordPlacement)(function (v) {
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.manyTill(Text_Parsing_StringParser_String.anyChar)(end))(function (v1) {
            return Data_Function.apply(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser))(Data_Function.apply(ChordAndLyric.create(v))(parseLyric(v1)));
        });
    });
};
var parseSongLyric = function (end) {
    return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(parseOnlyLyric(end))(parseOnlyChord(end)))(parseChordAndLyric(end));
};
var parseCarriageReturn = Data_Function.apply(Text_Parsing_StringParser["try"])(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(parseNewline)(function () {
    return parseNewline;
}));
var parseSongSection = (function () {
    var end = Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser_Combinators.lookAhead(Text_Parsing_StringParser_String.string("/")))(Text_Parsing_StringParser_Combinators.lookAhead(parseCarriageReturn)))(Text_Parsing_StringParser_Combinators.lookAhead(Text_Parsing_StringParser_String.string("\\"))))(Text_Parsing_StringParser_Combinators.lookAhead(Text_Parsing_StringParser_String.string("|")));
    return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(parseSongSectionName)(function (v) {
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(parseNewline)(function () {
            return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.manyTill(parseSongLyric(end))(parseCarriageReturn))(function (v1) {
                return Data_Function.apply(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser))({
                    name: v, 
                    lyrics: Data_Array.fromFoldable(Data_List.foldableList)(v1)
                });
            });
        });
    });
})();
var parseSongContent = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.manyTill(parseSongSection)(Text_Parsing_StringParser_String.eof))(function (v) {
    return Data_Function.apply(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser))(Data_Function.apply(SongContent)(Data_Array.fromFoldable(Data_List.foldableList)(v)));
});
var parseSong = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(parseSongMeta)(function (v) {
    return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(parseNewline)(function () {
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(parseSongContent)(function (v1) {
            return Data_Function.apply(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser))({
                meta: v, 
                content: v1
            });
        });
    });
});
var genericYear = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.Year" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Year))(Data_Generic.fromSpine(Data_Generic.genericInt)(v.value1[0](Data_Unit.unit)));
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Model.Year", [ {
        sigConstructor: "Model.Year", 
        sigValues: [ function ($dollarq1) {
            return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
        } ]
    } ]);
}, function (v) {
    return new Data_Generic.SProd("Model.Year", [ function ($dollarq) {
        return Data_Generic.toSpine(Data_Generic.genericInt)(v);
    } ]);
});
var isForeignYear = new Data_Foreign_Class.IsForeign(Data_Foreign_Generic.readGeneric(genericYear)(Data_Foreign_Generic.defaultOptions));
var genericSongSectionName = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.Intro" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Intro.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.Chorus" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Chorus.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.Verse" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Verse.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.Outro" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Outro.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.Bridge" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Bridge.value);
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Model.SongSectionName", [ {
        sigConstructor: "Model.Intro", 
        sigValues: [  ]
    }, {
        sigConstructor: "Model.Chorus", 
        sigValues: [  ]
    }, {
        sigConstructor: "Model.Verse", 
        sigValues: [  ]
    }, {
        sigConstructor: "Model.Outro", 
        sigValues: [  ]
    }, {
        sigConstructor: "Model.Bridge", 
        sigValues: [  ]
    } ]);
}, function (v) {
    if (v instanceof Intro) {
        return new Data_Generic.SProd("Model.Intro", [  ]);
    };
    if (v instanceof Chorus) {
        return new Data_Generic.SProd("Model.Chorus", [  ]);
    };
    if (v instanceof Verse) {
        return new Data_Generic.SProd("Model.Verse", [  ]);
    };
    if (v instanceof Outro) {
        return new Data_Generic.SProd("Model.Outro", [  ]);
    };
    if (v instanceof Bridge) {
        return new Data_Generic.SProd("Model.Bridge", [  ]);
    };
    throw new Error("Failed pattern match at Model line 285, column 1 - line 285, column 66: " + [ v.constructor.name ]);
});
var isForeignSongSectionName = new Data_Foreign_Class.IsForeign(Data_Foreign_Generic.readGeneric(genericSongSectionName)(Data_Foreign_Generic.defaultOptions));
var genericSongMeta = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.SongMeta" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(SongMeta))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 4) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (album1) {
                    return function (artist1) {
                        return function (title1) {
                            return function (year1) {
                                return {
                                    album: album1, 
                                    artist: artist1, 
                                    title: title1, 
                                    year: year1
                                };
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[0]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[1]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[2]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericYear)((r.value0[3]).recValue(Data_Unit.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Data_Unit.unit)));
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Model.SongMeta", [ {
        sigConstructor: "Model.SongMeta", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "album", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "artist", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "title", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "year", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(genericYear)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    } ]);
}, function (v) {
    return new Data_Generic.SProd("Model.SongMeta", [ function ($dollarq) {
        return new Data_Generic.SRecord([ {
            recLabel: "album", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(Data_Generic.genericString)(v.album);
            }
        }, {
            recLabel: "artist", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(Data_Generic.genericString)(v.artist);
            }
        }, {
            recLabel: "title", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(Data_Generic.genericString)(v.title);
            }
        }, {
            recLabel: "year", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(genericYear)(v.year);
            }
        } ]);
    } ]);
});
var isForeignSongMeta = new Data_Foreign_Class.IsForeign(Data_Foreign_Generic.readGeneric(genericSongMeta)(Data_Foreign_Generic.defaultOptions));
var showSongMeta = new Data_Show.Show(Data_Generic.gShow(genericSongMeta));
var genericChordPlacment = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.InsideWord" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(InsideWord.create))(Data_Generic.fromSpine(Parser.genericSongChord)(v.value1[0](Data_Unit.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.BetweenWord" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(BetweenWord.create))(Data_Generic.fromSpine(Parser.genericSongChord)(v.value1[0](Data_Unit.unit)));
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Model.ChordPlacement", [ {
        sigConstructor: "Model.InsideWord", 
        sigValues: [ function ($dollarq1) {
            return Data_Generic.toSignature(Parser.genericSongChord)(Data_Generic.anyProxy);
        } ]
    }, {
        sigConstructor: "Model.BetweenWord", 
        sigValues: [ function ($dollarq1) {
            return Data_Generic.toSignature(Parser.genericSongChord)(Data_Generic.anyProxy);
        } ]
    } ]);
}, function (v) {
    if (v instanceof InsideWord) {
        return new Data_Generic.SProd("Model.InsideWord", [ function ($dollarq) {
            return Data_Generic.toSpine(Parser.genericSongChord)(v.value0);
        } ]);
    };
    if (v instanceof BetweenWord) {
        return new Data_Generic.SProd("Model.BetweenWord", [ function ($dollarq) {
            return Data_Generic.toSpine(Parser.genericSongChord)(v.value0);
        } ]);
    };
    throw new Error("Failed pattern match at Model line 290, column 1 - line 290, column 63: " + [ v.constructor.name ]);
});
var genericSongLyric = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.ChordAndLyric" && v.value1.length === 2)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(ChordAndLyric.create))(Data_Generic.fromSpine(genericChordPlacment)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(v.value1[1](Data_Unit.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.OnlyChord" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(OnlyChord.create))(Data_Generic.fromSpine(Parser.genericSongChord)(v.value1[0](Data_Unit.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.OnlyLyric" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(OnlyLyric.create))(Data_Generic.fromSpine(Data_Generic.genericString)(v.value1[0](Data_Unit.unit)));
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Model.SongLyric", [ {
        sigConstructor: "Model.ChordAndLyric", 
        sigValues: [ function ($dollarq1) {
            return Data_Generic.toSignature(genericChordPlacment)(Data_Generic.anyProxy);
        }, function ($dollarq1) {
            return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
        } ]
    }, {
        sigConstructor: "Model.OnlyChord", 
        sigValues: [ function ($dollarq1) {
            return Data_Generic.toSignature(Parser.genericSongChord)(Data_Generic.anyProxy);
        } ]
    }, {
        sigConstructor: "Model.OnlyLyric", 
        sigValues: [ function ($dollarq1) {
            return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
        } ]
    } ]);
}, function (v) {
    if (v instanceof ChordAndLyric) {
        return new Data_Generic.SProd("Model.ChordAndLyric", [ function ($dollarq) {
            return Data_Generic.toSpine(genericChordPlacment)(v.value0);
        }, function ($dollarq) {
            return Data_Generic.toSpine(Data_Generic.genericString)(v.value1);
        } ]);
    };
    if (v instanceof OnlyChord) {
        return new Data_Generic.SProd("Model.OnlyChord", [ function ($dollarq) {
            return Data_Generic.toSpine(Parser.genericSongChord)(v.value0);
        } ]);
    };
    if (v instanceof OnlyLyric) {
        return new Data_Generic.SProd("Model.OnlyLyric", [ function ($dollarq) {
            return Data_Generic.toSpine(Data_Generic.genericString)(v.value0);
        } ]);
    };
    throw new Error("Failed pattern match at Model line 271, column 1 - line 271, column 54: " + [ v.constructor.name ]);
});
var genericSongSection = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.SongSection" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(SongSection))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 2) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (lyrics1) {
                    return function (name1) {
                        return {
                            lyrics: lyrics1, 
                            name: name1
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericArray(genericSongLyric))((r.value0[0]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericSongSectionName)((r.value0[1]).recValue(Data_Unit.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Data_Unit.unit)));
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Model.SongSection", [ {
        sigConstructor: "Model.SongSection", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "lyrics", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericArray(genericSongLyric))(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "name", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(genericSongSectionName)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    } ]);
}, function (v) {
    return new Data_Generic.SProd("Model.SongSection", [ function ($dollarq) {
        return new Data_Generic.SRecord([ {
            recLabel: "lyrics", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(Data_Generic.genericArray(genericSongLyric))(v.lyrics);
            }
        }, {
            recLabel: "name", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(genericSongSectionName)(v.name);
            }
        } ]);
    } ]);
});
var genericSongContent = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.SongContent" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(SongContent))(Data_Generic.fromSpine(Data_Generic.genericArray(genericSongSection))(v.value1[0](Data_Unit.unit)));
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Model.SongContent", [ {
        sigConstructor: "Model.SongContent", 
        sigValues: [ function ($dollarq1) {
            return Data_Generic.toSignature(Data_Generic.genericArray(genericSongSection))(Data_Generic.anyProxy);
        } ]
    } ]);
}, function (v) {
    return new Data_Generic.SProd("Model.SongContent", [ function ($dollarq) {
        return Data_Generic.toSpine(Data_Generic.genericArray(genericSongSection))(v);
    } ]);
});
var genericSong = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.Song" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Song))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 2) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (content1) {
                    return function (meta1) {
                        return {
                            content: content1, 
                            meta: meta1
                        };
                    };
                }))(Data_Generic.fromSpine(genericSongContent)((r.value0[0]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericSongMeta)((r.value0[1]).recValue(Data_Unit.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Data_Unit.unit)));
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Model.Song", [ {
        sigConstructor: "Model.Song", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "content", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(genericSongContent)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "meta", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(genericSongMeta)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    } ]);
}, function (v) {
    return new Data_Generic.SProd("Model.Song", [ function ($dollarq) {
        return new Data_Generic.SRecord([ {
            recLabel: "content", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(genericSongContent)(v.content);
            }
        }, {
            recLabel: "meta", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(genericSongMeta)(v.meta);
            }
        } ]);
    } ]);
});
var genericDBSong = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.DBSong" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(DBSong))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 2) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (id1) {
                    return function (song1) {
                        return {
                            id: id1, 
                            song: song1
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[0]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericSong)((r.value0[1]).recValue(Data_Unit.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Data_Unit.unit)));
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Model.DBSong", [ {
        sigConstructor: "Model.DBSong", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "id", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "song", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(genericSong)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    } ]);
}, function (v) {
    return new Data_Generic.SProd("Model.DBSong", [ function ($dollarq) {
        return new Data_Generic.SRecord([ {
            recLabel: "id", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(Data_Generic.genericString)(v.id);
            }
        }, {
            recLabel: "song", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(genericSong)(v.song);
            }
        } ]);
    } ]);
});
var isForeignDBSong = new Data_Foreign_Class.IsForeign(Data_Foreign_Generic.readGeneric(genericDBSong)(Data_Foreign_Generic.defaultOptions));
var isForeignSong = new Data_Foreign_Class.IsForeign(Data_Foreign_Generic.readGeneric(genericSong)(Data_Foreign_Generic.defaultOptions));
var showSong = new Data_Show.Show(Data_Generic.gShow(genericSong));
var isForeignSongContent = new Data_Foreign_Class.IsForeign(Data_Foreign_Generic.readGeneric(genericSongContent)(Data_Foreign_Generic.defaultOptions));
var showSongContent = new Data_Show.Show(Data_Generic.gShow(genericSongContent));
var isForeignSongSection = new Data_Foreign_Class.IsForeign(Data_Foreign_Generic.readGeneric(genericSongSection)(Data_Foreign_Generic.defaultOptions));
var showSongSection = new Data_Show.Show(Data_Generic.gShow(genericSongSection));
var isForeignSongLyric = new Data_Foreign_Class.IsForeign(Data_Foreign_Generic.readGeneric(genericSongLyric)(Data_Foreign_Generic.defaultOptions));
var showSongLyric = new Data_Show.Show(Data_Generic.gShow(genericSongLyric));
var showChordPlacment = new Data_Show.Show(Data_Generic.gShow(genericChordPlacment));
var exampleSongMeta = {
    title: "Tokyo vampires and wolves", 
    artist: "The Wombats", 
    album: "This modern glitch", 
    year: 2011
};
var exampleSongContent = [ {
    name: Intro.value, 
    lyrics: [ new ChordAndLyric(new BetweenWord(Parser.exampleChord), "test") ]
} ];
var exampleSong = {
    meta: exampleSongMeta, 
    content: exampleSongContent
};
var eqYear = new Data_Eq.Eq(Data_Generic.gEq(genericYear));
var eqSongSection = new Data_Eq.Eq(Data_Generic.gEq(genericSongSection));
var eqSongMeta = new Data_Eq.Eq(Data_Generic.gEq(genericSongMeta));
var eqSongLyric = new Data_Eq.Eq(Data_Generic.gEq(genericSongLyric));
var eqSongContent = new Data_Eq.Eq(Data_Generic.gEq(genericSongContent));
var eqSong = new Data_Eq.Eq(Data_Generic.gEq(genericSong));
var arbitrarySongSection = new Test_StrongCheck_Arbitrary.Arbitrary(Test_StrongCheck_Generic.gArbitrary(genericSongSection));
var arbitrarySongMeta = new Test_StrongCheck_Arbitrary.Arbitrary(Test_StrongCheck_Generic.gArbitrary(genericSongMeta));
var arbitrarySongLyric = new Test_StrongCheck_Arbitrary.Arbitrary(Test_StrongCheck_Generic.gArbitrary(genericSongLyric));
var arbitrarySongContent = new Test_StrongCheck_Arbitrary.Arbitrary(Test_StrongCheck_Generic.gArbitrary(genericSongContent));
var arbitrarySong = new Test_StrongCheck_Arbitrary.Arbitrary(Test_StrongCheck_Generic.gArbitrary(genericSong));
var arbYear = new Test_StrongCheck_Arbitrary.Arbitrary(Test_StrongCheck_Generic.gArbitrary(genericYear));
module.exports = {
    InsideWord: InsideWord, 
    BetweenWord: BetweenWord, 
    DBSong: DBSong, 
    Song: Song, 
    SongContent: SongContent, 
    ChordAndLyric: ChordAndLyric, 
    OnlyChord: OnlyChord, 
    OnlyLyric: OnlyLyric, 
    SongMeta: SongMeta, 
    SongSection: SongSection, 
    Intro: Intro, 
    Chorus: Chorus, 
    Verse: Verse, 
    Outro: Outro, 
    Bridge: Bridge, 
    Year: Year, 
    exampleSong: exampleSong, 
    exampleSongContent: exampleSongContent, 
    exampleSongMeta: exampleSongMeta, 
    parseCarriageReturn: parseCarriageReturn, 
    parseChordAndLyric: parseChordAndLyric, 
    parseChordPlacement: parseChordPlacement, 
    parseLyric: parseLyric, 
    parseNewline: parseNewline, 
    parseOnlyChord: parseOnlyChord, 
    parseOnlyLyric: parseOnlyLyric, 
    parseSong: parseSong, 
    parseSongContent: parseSongContent, 
    parseSongLyric: parseSongLyric, 
    parseSongMeta: parseSongMeta, 
    parseSongSection: parseSongSection, 
    parseSongSectionName: parseSongSectionName, 
    serializeChordPlacement: serializeChordPlacement, 
    serializeSong: serializeSong, 
    serializeSongContent: serializeSongContent, 
    serializeSongLyric: serializeSongLyric, 
    serializeSongMeta: serializeSongMeta, 
    serializeSongSection: serializeSongSection, 
    serializeSongSectionName: serializeSongSectionName, 
    genericDBSong: genericDBSong, 
    isForeignDBSong: isForeignDBSong, 
    genericSong: genericSong, 
    showSong: showSong, 
    arbitrarySong: arbitrarySong, 
    eqSong: eqSong, 
    isForeignSong: isForeignSong, 
    genericSongMeta: genericSongMeta, 
    arbitrarySongMeta: arbitrarySongMeta, 
    showSongMeta: showSongMeta, 
    eqSongMeta: eqSongMeta, 
    isForeignSongMeta: isForeignSongMeta, 
    genericYear: genericYear, 
    arbYear: arbYear, 
    eqYear: eqYear, 
    isForeignYear: isForeignYear, 
    genericSongContent: genericSongContent, 
    arbitrarySongContent: arbitrarySongContent, 
    eqSongContent: eqSongContent, 
    showSongContent: showSongContent, 
    isForeignSongContent: isForeignSongContent, 
    genericSongSection: genericSongSection, 
    isForeignSongSection: isForeignSongSection, 
    arbitrarySongSection: arbitrarySongSection, 
    eqSongSection: eqSongSection, 
    showSongSection: showSongSection, 
    genericSongLyric: genericSongLyric, 
    arbitrarySongLyric: arbitrarySongLyric, 
    showSongLyric: showSongLyric, 
    eqSongLyric: eqSongLyric, 
    isForeignSongLyric: isForeignSongLyric, 
    genericSongSectionName: genericSongSectionName, 
    isForeignSongSectionName: isForeignSongSectionName, 
    genericChordPlacment: genericChordPlacment, 
    showChordPlacment: showChordPlacment
};
