// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Data_Tuple_Nested = require("../Data.Tuple.Nested");
var Data_Foldable = require("../Data.Foldable");
var CSS_Property = require("../CSS.Property");
var CSS_String = require("../CSS.String");
var CSS_Stylesheet = require("../CSS.Stylesheet");
var CSS_Time = require("../CSS.Time");
var CSS_Transition = require("../CSS.Transition");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Function = require("../Data.Function");
var IterationCount = function (x) {
    return x;
};
var FillMode = function (x) {
    return x;
};
var AnimationName = function (x) {
    return x;
};
var AnimationDirection = function (x) {
    return x;
};
var valIterationCount = new CSS_Property.Val(function (v) {
    return v;
});
var valFillMode = new CSS_Property.Val(function (v) {
    return v;
});
var valAnimationName = new CSS_Property.Val(function (v) {
    return v;
});
var valAnimationDirection = new CSS_Property.Val(function (v) {
    return v;
});
var reverse = Data_Function.apply(AnimationDirection)(CSS_String.fromString(CSS_Property.isStringValue)("reverse"));
var normalAnimationDirection = Data_Function.apply(AnimationDirection)(CSS_String.fromString(CSS_Property.isStringValue)("normal"));
var iterationCount = function ($8) {
    return IterationCount(CSS_Property.value(CSS_Property.valNumber)($8));
};
var isStringAnimationName = new CSS_String.IsString(function ($9) {
    return AnimationName(CSS_String.fromString(CSS_Property.isStringValue)($9));
});
var infinite = Data_Function.apply(IterationCount)(CSS_String.fromString(CSS_Property.isStringValue)("infinite"));
var forwards = Data_Function.apply(FillMode)(CSS_String.fromString(CSS_Property.isStringValue)("forwards"));
var backwards = Data_Function.apply(FillMode)(CSS_String.fromString(CSS_Property.isStringValue)("backwards"));
var animation = function (p) {
    return function (de) {
        return function (f) {
            return function (du) {
                return function (i) {
                    return function (di) {
                        return function (fm) {
                            var animationKeys = [ "animation", "-webkit-animation", "-moz-animation", "-o-animation" ];
                            return Data_Foldable.for_(CSS_Stylesheet.applicativeStyleM)(Data_Foldable.foldableArray)(animationKeys)(function (k) {
                                return CSS_Stylesheet.key(CSS_Property.valTuple(CSS_Property.valTuple(CSS_Property.valTuple(CSS_Property.valTuple(CSS_Property.valTuple(CSS_Property.valTuple(valAnimationName)(CSS_Time.valTime))(CSS_Transition.valTimingFunction))(CSS_Time.valTime))(valIterationCount))(valAnimationDirection))(valFillMode))(CSS_String.fromString(CSS_Property.isStringKey)(k))(Data_Tuple_Nested.tuple7(p)(de)(f)(du)(i)(di)(fm));
                            });
                        };
                    };
                };
            };
        };
    };
};
var alternateReverse = Data_Function.apply(AnimationDirection)(CSS_String.fromString(CSS_Property.isStringValue)("alternate-reverse"));
var alternate = Data_Function.apply(AnimationDirection)(CSS_String.fromString(CSS_Property.isStringValue)("alternate"));
module.exports = {
    AnimationDirection: AnimationDirection, 
    AnimationName: AnimationName, 
    FillMode: FillMode, 
    IterationCount: IterationCount, 
    alternate: alternate, 
    alternateReverse: alternateReverse, 
    animation: animation, 
    backwards: backwards, 
    forwards: forwards, 
    infinite: infinite, 
    iterationCount: iterationCount, 
    normalAnimationDirection: normalAnimationDirection, 
    reverse: reverse, 
    valAnimationDirection: valAnimationDirection, 
    valIterationCount: valIterationCount, 
    valFillMode: valFillMode, 
    valAnimationName: valAnimationName, 
    isStringAnimationName: isStringAnimationName
};
