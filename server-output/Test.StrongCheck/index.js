// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_Eff_Random = require("../Control.Monad.Eff.Random");
var Control_Monad_Trampoline = require("../Control.Monad.Trampoline");
var Data_Array = require("../Data.Array");
var Data_Foldable = require("../Data.Foldable");
var Data_Int = require("../Data.Int");
var Data_List_1 = require("../Data.List");
var Data_List_1 = require("../Data.List");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var $$Math = require("../Math");
var Test_StrongCheck_Gen = require("../Test.StrongCheck.Gen");
var Test_StrongCheck_Arbitrary = require("../Test.StrongCheck.Arbitrary");
var Data_Eq = require("../Data.Eq");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Show = require("../Data.Show");
var Data_Semigroup = require("../Data.Semigroup");
var Control_Applicative = require("../Control.Applicative");
var Data_Function = require("../Data.Function");
var Control_Bind = require("../Control.Bind");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Unit = require("../Data.Unit");
var Data_Semiring = require("../Data.Semiring");
var Control_Monad_Free = require("../Control.Monad.Free");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Ring = require("../Data.Ring");
var Data_Functor = require("../Data.Functor");
var Success = (function () {
    function Success() {

    };
    Success.value = new Success();
    return Success;
})();
var Failed = (function () {
    function Failed(value0) {
        this.value0 = value0;
    };
    Failed.create = function (value0) {
        return new Failed(value0);
    };
    return Failed;
})();
var Testable = function (test) {
    this.test = test;
};
var throwOnFirstFailure = function (dictFoldable) {
    return function (n) {
        return function (fr) {
            var throwOnFirstFailure$prime = function (v) {
                return function (v1) {
                    if (v1 instanceof Data_List_1.Nil) {
                        return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                    };
                    if (v1 instanceof Data_List_1.Cons && v1.value0 instanceof Failed) {
                        return Data_Function.apply(Control_Monad_Eff_Exception.throwException)(Data_Function.apply(Control_Monad_Eff_Exception.error)("Test " + (Data_Show.show(Data_Show.showInt)(v) + (" failed: \n" + v1.value0.value0))));
                    };
                    if (v1 instanceof Data_List_1.Cons) {
                        return throwOnFirstFailure(Data_List_1.foldableList)(v + 1 | 0)(v1.value1);
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck line 160, column 3 - line 160, column 41: " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return throwOnFirstFailure$prime(n)(Data_List_1.fromFoldable(dictFoldable)(fr));
        };
    };
};
var testableResult = new Testable(Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad)));
var testableBoolean = new Testable(function (v) {
    if (v) {
        return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Success.value);
    };
    if (!v) {
        return Data_Function.apply(Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad)))(new Failed("Test returned false"));
    };
    throw new Error("Failed pattern match at Test.StrongCheck line 67, column 3 - line 67, column 27: " + [ v.constructor.name ]);
});
var test = function (dict) {
    return dict.test;
};
var testableFunction = function (dictArbitrary) {
    return function (dictTestable) {
        return new Testable(function (f) {
            return Control_Bind.bindFlipped(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(function ($74) {
                return test(dictTestable)(f($74));
            })(Test_StrongCheck_Arbitrary.arbitrary(dictArbitrary));
        });
    };
};
var showResult = new Data_Show.Show(function (v) {
    if (v instanceof Success) {
        return "Success";
    };
    if (v instanceof Failed) {
        return "Failed: " + v.value0;
    };
    throw new Error("Failed pattern match at Test.StrongCheck line 50, column 3 - line 51, column 3: " + [ v.constructor.name ]);
});
var semigroupResult = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Success && v1 instanceof Success) {
            return Success.value;
        };
        if (v instanceof Failed && v1 instanceof Success) {
            return new Failed(v.value0);
        };
        if (v instanceof Success && v1 instanceof Failed) {
            return new Failed(v1.value0);
        };
        if (v instanceof Failed && v1 instanceof Failed) {
            return new Failed(v.value0 + ("\n" + v1.value0));
        };
        throw new Error("Failed pattern match at Test.StrongCheck line 54, column 3 - line 54, column 35: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var monoidResult = new Data_Monoid.Monoid(function () {
    return semigroupResult;
}, Success.value);
var eqResult = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Success && y instanceof Success) {
            return true;
        };
        if (x instanceof Failed && y instanceof Failed) {
            return x.value0 === y.value0;
        };
        return false;
    };
});
var ordResult = new Data_Ord.Ord(function () {
    return eqResult;
}, function (x) {
    return function (y) {
        if (x instanceof Success && y instanceof Success) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Success) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Success) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Failed && y instanceof Failed) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        throw new Error("Failed pattern match at Test.StrongCheck line 47, column 1 - line 47, column 40: " + [ x.constructor.name, y.constructor.name ]);
    };
});
var defState = function (s) {
    return new Test_StrongCheck_Gen.GenState({
        seed: s, 
        size: 10
    });
};
var quickCheckPure = function (dictTestable) {
    return function (n) {
        return function (s) {
            return function (prop) {
                return Data_Function.apply(Control_Monad_Trampoline.runTrampoline)(Test_StrongCheck_Gen["sample'"](Control_Monad_Free.freeMonad)(n)(defState(s))(test(dictTestable)(prop)));
            };
        };
    };
};
var smallCheckPure = function (dictTestable) {
    return function (s) {
        return function (prop) {
            return Data_Function.apply(Control_Monad_Trampoline.runTrampoline)(Test_StrongCheck_Gen.collectAll(Control_Monad_Free.freeMonad)(defState(s))(test(dictTestable)(prop)));
        };
    };
};
var countSuccesses = function (dictFoldable) {
    return function (fa) {
        var countSuccesses$prime = function (__copy_acc) {
            return function (__copy_v) {
                var acc = __copy_acc;
                var v = __copy_v;
                tco: while (true) {
                    if (v instanceof Data_List_1.Nil) {
                        return acc;
                    };
                    if (v instanceof Data_List_1.Cons && v.value0 instanceof Success) {
                        var __tco_acc = acc + 1 | 0;
                        var __tco_v = v.value1;
                        acc = __tco_acc;
                        v = __tco_v;
                        continue tco;
                    };
                    if (v instanceof Data_List_1.Cons) {
                        var __tco_acc = acc;
                        var __tco_v = v.value1;
                        acc = __tco_acc;
                        v = __tco_v;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck line 165, column 1 - line 169, column 63: " + [ acc.constructor.name, v.constructor.name ]);
                };
            };
        };
        return countSuccesses$prime(0)(Data_List_1.fromFoldable(dictFoldable)(fa));
    };
};
var statCheckPure = function (dictTestable) {
    return function (s) {
        return function (freq) {
            return function (prop) {
                var $$try = function (__copy_x) {
                    var x = __copy_x;
                    tco: while (true) {
                        var measure = function (n) {
                            var results = quickCheckPure(dictTestable)(n)(s)(prop);
                            return Data_Function.apply(Data_Int.toNumber)(countSuccesses(Data_Foldable.foldableArray)(results) / Data_Array.length(results) | 0);
                        };
                        var measure$prime = function (v) {
                            if (v === 0) {
                                return [  ];
                            };
                            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(measure$prime(v - 1))([ measure(v * x | 0) ]);
                        };
                        var freqs = measure$prime(4);
                        var dists = Data_Functor.map(Data_Functor.functorArray)(function ($75) {
                            return $$Math.abs(freq - $75);
                        })(freqs);
                        var dirs = Data_Array.zipWith(function (a) {
                            return function (b) {
                                return a - b;
                            };
                        })(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ 1.0 ])(dists))(dists);
                        var fails = Data_Function.apply(Data_Array.length)(Data_Array.filter(Data_Ord.greaterThan(Data_Ord.ordNumber)(0.0))(dirs));
                        var succs = Data_Array.filter(Data_Ord.lessThanOrEq(Data_Ord.ordNumber)(0.0))(dirs);
                        var $68 = fails > 1;
                        if ($68) {
                            var $69 = x < 1000000;
                            if ($69) {
                                var __tco_x = x * 10 | 0;
                                x = __tco_x;
                                continue tco;
                            };
                            if (!$69) {
                                return Data_Function.apply(Failed.create)("Divergence of statistical test: freqs = " + (Data_Show.show(Data_Show.showArray(Data_Show.showNumber))(freqs) + (", dists = " + (Data_Show.show(Data_Show.showArray(Data_Show.showNumber))(dists) + (", dirs = " + (Data_Show.show(Data_Show.showArray(Data_Show.showNumber))(dirs) + (", fails: " + Data_Show.show(Data_Show.showInt)(fails))))))));
                            };
                            throw new Error("Failed pattern match at Test.StrongCheck line 141, column 9 - line 142, column 166: " + [ $69.constructor.name ]);
                        };
                        if (!$68) {
                            return Data_Maybe.maybe(new Failed("Error!"))(function (l) {
                                var $70 = l > 0.5;
                                if ($70) {
                                    return Data_Function.apply(Failed.create)("Final convergence distance too low: " + Data_Show.show(Data_Show.showNumber)(l));
                                };
                                if (!$70) {
                                    return Success.value;
                                };
                                throw new Error("Failed pattern match at Test.StrongCheck line 143, column 43 - line 143, column 129: " + [ $70.constructor.name ]);
                            })(Data_Array.last(succs));
                        };
                        throw new Error("Failed pattern match at Test.StrongCheck line 139, column 7 - line 143, column 145: " + [ $68.constructor.name ]);
                    };
                };
                return $$try(100);
            };
        };
    };
};
var statCheck = function (dictTestable) {
    return function (freq) {
        return function (prop) {
            return function __do() {
                var v = Control_Monad_Eff_Random.random();
                return Data_Function.apply(function ($76) {
                    return Control_Monad_Eff_Console.log(Data_Show.show(showResult)($76));
                })(statCheckPure(dictTestable)(v)(freq)(prop))();
            };
        };
    };
};
var check = function (dictTestable) {
    return function (dictFoldable) {
        return function (f) {
            return function (prop) {
                return function __do() {
                    var v = Control_Monad_Eff_Random.random();
                    var results = f(v)(prop);
                    var successes = countSuccesses(dictFoldable)(results);
                    Data_Function.apply(Control_Monad_Eff_Console.log)(Data_Show.show(Data_Show.showInt)(successes) + ("/" + (Data_Show.show(Data_Show.showInt)(Data_Function.apply(Data_List_1.length)(Data_List_1.fromFoldable(dictFoldable)(results))) + " test(s) passed.")))();
                    return throwOnFirstFailure(dictFoldable)(1)(results)();
                };
            };
        };
    };
};
var quickCheck$prime = function (dictTestable) {
    return function (n) {
        return check(dictTestable)(Data_Foldable.foldableArray)(quickCheckPure(dictTestable)(n));
    };
};
var quickCheck = function (dictTestable) {
    return function (prop) {
        return quickCheck$prime(dictTestable)(100)(prop);
    };
};
var smallCheck = function (dictTestable) {
    return function (prop) {
        return check(dictTestable)(Data_Foldable.foldableArray)(smallCheckPure(dictTestable))(prop);
    };
};
var assert = function (dictTestable) {
    return quickCheck$prime(dictTestable)(1);
};
var annotate = function (v) {
    if (v) {
        return Data_Function["const"](Success.value);
    };
    if (!v) {
        return Failed.create;
    };
    throw new Error("Failed pattern match at Test.StrongCheck line 178, column 1 - line 178, column 30: " + [ v.constructor.name ]);
};
var assertEq = function (dictEq) {
    return function (dictShow) {
        return function (a) {
            return function (b) {
                var msg = Data_Show.show(dictShow)(a) + (" /= " + Data_Show.show(dictShow)(b));
                return annotate(Data_Eq.eq(dictEq)(a)(b))(msg);
            };
        };
    };
};
var assertNotEq = function (dictEq) {
    return function (dictShow) {
        return function (a) {
            return function (b) {
                var msg = Data_Show.show(dictShow)(a) + (" == " + Data_Show.show(dictShow)(b));
                return annotate(Data_Eq.notEq(dictEq)(a)(b))(msg);
            };
        };
    };
};
module.exports = {
    Success: Success, 
    Failed: Failed, 
    Testable: Testable, 
    annotate: annotate, 
    assert: assert, 
    assertEq: assertEq, 
    assertNotEq: assertNotEq, 
    quickCheck: quickCheck, 
    "quickCheck'": quickCheck$prime, 
    quickCheckPure: quickCheckPure, 
    smallCheck: smallCheck, 
    smallCheckPure: smallCheckPure, 
    statCheck: statCheck, 
    statCheckPure: statCheckPure, 
    test: test, 
    eqResult: eqResult, 
    ordResult: ordResult, 
    showResult: showResult, 
    semigroupResult: semigroupResult, 
    monoidResult: monoidResult, 
    testableBoolean: testableBoolean, 
    testableResult: testableResult, 
    testableFunction: testableFunction
};
