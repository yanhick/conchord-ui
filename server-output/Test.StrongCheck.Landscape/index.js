// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Data_Lazy = require("../Data.Lazy");
var Data_Maybe = require("../Data.Maybe");
var Data_Tuple = require("../Data.Tuple");
var Data_Monoid = require("../Data.Monoid");
var Control_Comonad_Cofree = require("../Control.Comonad.Cofree");
var Control_Monad_Trampoline = require("../Control.Monad.Trampoline");
var Control_Monad_List_Trans = require("../Control.Monad.List.Trans");
var Data_Array = require("../Data.Array");
var Test_StrongCheck_Perturb = require("../Test.StrongCheck.Perturb");
var Test_StrongCheck_Gen = require("../Test.StrongCheck.Gen");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Functor = require("../Data.Functor");
var Data_Eq = require("../Data.Eq");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Free = require("../Control.Monad.Free");
var Data_Function = require("../Data.Function");
var Control_Applicative = require("../Control.Applicative");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var DriverState = function (x) {
    return x;
};
var Landscape = function (x) {
    return x;
};
var unLandscape = function (v) {
    return v;
};
var unDriverState = function (v) {
    return v;
};
var whereAt = function (v) {
    return (unDriverState(Control_Comonad_Cofree.head(v))).value;
};
var sampleHere$prime = function (dictPerturb) {
    return function (n) {
        return function ($20) {
            return Data_Lazy.force(Control_Monad_List_Trans.foldl(Data_Lazy.monadLazy)(function (b) {
                return function (a) {
                    return Data_Array.cons(a)(b);
                };
            })([  ])(Control_Monad_List_Trans.take(Data_Lazy.applicativeLazy)(n)(Data_Functor.map(Control_Monad_List_Trans.functorListT(Data_Lazy.functorLazy))(Control_Comonad_Cofree.head)(Control_Comonad_Cofree.tail(unLandscape($20))))));
        };
    };
};
var sampleHere = function (dictPerturb) {
    return function (n) {
        return function ($21) {
            return Data_Functor.map(Data_Functor.functorArray)(function ($22) {
                return (function (v) {
                    return v.value;
                })(unDriverState($22));
            })(sampleHere$prime(dictPerturb)(n)($21));
        };
    };
};
var moveTo = function (dictEq) {
    return function (dictPerturb) {
        return function (a) {
            return function (v) {
                var moveIt = function (a1) {
                    return function ($23) {
                        return Data_Lazy.force(Control_Monad_List_Trans.head(Data_Lazy.monadLazy)(Control_Monad_List_Trans.filter(Data_Lazy.functorLazy)(function (v1) {
                            return Data_Eq.eq(dictEq)((unDriverState(Control_Comonad_Cofree.head(v1))).value)(a1);
                        })(Control_Comonad_Cofree.tail(unLandscape($23)))));
                    };
                };
                return Data_Functor.map(Data_Maybe.functorMaybe)(Landscape)(moveIt(a)(v));
            };
        };
    };
};
var mkState = function (val) {
    return function ($$var) {
        return function (s) {
            return {
                value: val, 
                variance: $$var, 
                state: s
            };
        };
    };
};
var nearby$prime = function (dictPerturb) {
    return function (s) {
        return function (d) {
            return function (a) {
                return function (v) {
                    var loop = function (a1) {
                        return function (s1) {
                            return function (v1) {
                                return Control_Bind.bind(Control_Monad_List_Trans.bindListT(Data_Lazy.monadLazy))(Test_StrongCheck_Gen.toLazyList(Test_StrongCheck_Gen.infinite(Control_Monad_Free.freeMonad)(Test_StrongCheck_Perturb.perturb(dictPerturb)(v1)(a1)))(s1))(function (v2) {
                                    var h = mkState(v2)(v1)(s1);
                                    var t = loop(v2)(Test_StrongCheck_Gen.updateSeedState(s1))(d(v1));
                                    return Data_Function.apply(Control_Applicative.pure(Control_Monad_List_Trans.applicativeListT(Data_Lazy.monadLazy)))(Control_Comonad_Cofree.mkCofree(h)(t));
                                });
                            };
                        };
                    };
                    return Data_Function.apply(Landscape)(Control_Comonad_Cofree.mkCofree(mkState(a)(v)(s))(loop(a)(s)(v)));
                };
            };
        };
    };
};
var everywhere$prime = function (dictPerturb) {
    return function (s) {
        return function (d) {
            return function (v) {
                return function (g) {
                    var go = function (g1) {
                        return function (s1) {
                            return Data_Lazy.defer(function (v1) {
                                var o = Data_Functor.map(Data_Maybe.functorMaybe)(Test_StrongCheck_Gen.unGenOut)(Control_Monad_Trampoline.runTrampoline(Test_StrongCheck_Gen.applyGen(Control_Monad_Free.freeMonad)(s1)(g1)));
                                return Data_Maybe.maybe(Control_Monad_List_Trans.nil(Data_Lazy.applicativeLazy))(function (o$prime) {
                                    var g2 = Data_Tuple.snd(o$prime.value);
                                    var a = Data_Tuple.fst(o$prime.value);
                                    return Control_Monad_List_Trans["prepend'"](Data_Lazy.applicativeLazy)(nearby$prime(dictPerturb)(o$prime.state)(d)(a)(v))(go(g2)(o$prime.state));
                                })(o);
                            });
                        };
                    };
                    return Control_Monad_List_Trans.wrapEffect(Data_Lazy.functorLazy)(go(Test_StrongCheck_Gen.infinite(Control_Monad_Free.freeMonad)(g))(s));
                };
            };
        };
    };
};
var somewhere$prime = function (dictPerturb) {
    return function (s) {
        return function (d) {
            return function (v) {
                return function ($24) {
                    return Data_Lazy.force(Control_Monad_List_Trans.head(Data_Lazy.monadLazy)(everywhere$prime(dictPerturb)(s)(d)(v)($24)));
                };
            };
        };
    };
};
var decayThird = function (v) {
    return v / 3.0;
};
var decayHalf = function (v) {
    return v / 2.0;
};
var defaultDecay = decayHalf;
var nearby = function (dictPerturb) {
    return nearby$prime(dictPerturb)(Data_Monoid.mempty(Test_StrongCheck_Gen.monoidGenState))(defaultDecay);
};
var somewhere = function (dictPerturb) {
    return somewhere$prime(dictPerturb)(Data_Monoid.mempty(Test_StrongCheck_Gen.monoidGenState))(defaultDecay);
};
var everywhere = function (dictPerturb) {
    return everywhere$prime(dictPerturb)(Data_Monoid.mempty(Test_StrongCheck_Gen.monoidGenState))(decayHalf);
};
module.exports = {
    DriverState: DriverState, 
    Landscape: Landscape, 
    decayHalf: decayHalf, 
    decayThird: decayThird, 
    defaultDecay: defaultDecay, 
    everywhere: everywhere, 
    "everywhere'": everywhere$prime, 
    moveTo: moveTo, 
    nearby: nearby, 
    "nearby'": nearby$prime, 
    sampleHere: sampleHere, 
    "sampleHere'": sampleHere$prime, 
    somewhere: somewhere, 
    "somewhere'": somewhere$prime, 
    unDriverState: unDriverState, 
    unLandscape: unLandscape, 
    whereAt: whereAt
};
