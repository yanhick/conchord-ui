// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Data_Either = require("../Data.Either");
var Data_Foldable = require("../Data.Foldable");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget");
var Data_Lens_Types_1 = require("../Data.Lens.Types");
var Data_Lens_Types_1 = require("../Data.Lens.Types");
var Data_List = require("../Data.List");
var Data_Maybe = require("../Data.Maybe");
var Data_Maybe_First = require("../Data.Maybe.First");
var Data_Maybe_Last = require("../Data.Maybe.Last");
var Data_Monoid = require("../Data.Monoid");
var Data_Monoid_Additive = require("../Data.Monoid.Additive");
var Data_Monoid_Conj = require("../Data.Monoid.Conj");
var Data_Monoid_Disj = require("../Data.Monoid.Disj");
var Data_Monoid_Dual = require("../Data.Monoid.Dual");
var Data_Monoid_Endo = require("../Data.Monoid.Endo");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative");
var Data_Profunctor = require("../Data.Profunctor");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice");
var Data_Tuple = require("../Data.Tuple");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Ring = require("../Data.Ring");
var Data_Function = require("../Data.Function");
var Data_Lens_Internal_Indexed = require("../Data.Lens.Internal.Indexed");
var Control_Apply = require("../Control.Apply");
var Data_Functor = require("../Data.Functor");
var Control_Applicative = require("../Control.Applicative");
var Data_Unit = require("../Data.Unit");
var Control_Category = require("../Control.Category");
var Data_Ord = require("../Data.Ord");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra");
var Data_Eq = require("../Data.Eq");
var unfolded = function (dictMonoid) {
    return function (f) {
        return function (p) {
            var go = function ($37) {
                return Data_Maybe.maybe(Data_Monoid.mempty(dictMonoid))(function (v) {
                    return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(Data_Lens_Internal_Forget.runForget(p)(v.value0))(go(v.value1));
                })(f($37));
            };
            return go;
        };
    };
};
var replicated = function (dictMonoid) {
    return function (n) {
        var go = function (v) {
            return function (x) {
                if (v === 0) {
                    return Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid));
                };
                return Data_Semigroup.append(Data_Semigroup.semigroupFn(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]()))(x)(go(v - 1)(x));
            };
        };
        return function ($38) {
            return Data_Lens_Internal_Forget.Forget(go(n)(Data_Lens_Internal_Forget.runForget($38)));
        };
    };
};
var ifoldMapOf = function (p) {
    return function (f) {
        return Data_Function.apply(Data_Lens_Internal_Forget.runForget)(Data_Function.apply(p)(Data_Function.apply(Data_Lens_Internal_Indexed.Indexed)(Data_Tuple.uncurry(f))));
    };
};
var ifoldlOf = function (p) {
    return function (f) {
        return function (r) {
            return function ($39) {
                return Data_Function.flip(Data_Monoid_Endo.runEndo)(r)(Data_Monoid_Dual.runDual(ifoldMapOf(p)(function (i) {
                    return function ($40) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(f(i))($40)));
                    };
                })($39)));
            };
        };
    };
};
var ifoldrOf = function (p) {
    return function (f) {
        return function (r) {
            return function ($41) {
                return Data_Function.flip(Data_Monoid_Endo.runEndo)(r)(ifoldMapOf(p)(function (i) {
                    return function ($42) {
                        return Data_Monoid_Endo.Endo(f(i)($42));
                    };
                })($41));
            };
        };
    };
};
var itoListOf = function (p) {
    return ifoldrOf(p)(function (i) {
        return function (x) {
            return function (xs) {
                return new Data_List.Cons(new Data_Tuple.Tuple(i, x), xs);
            };
        };
    })(Data_List.Nil.value);
};
var itraverseOf_ = function (dictApplicative) {
    return function (p) {
        return function (f) {
            return ifoldrOf(p)(function (i) {
                return function (a) {
                    return function (fu) {
                        return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor["void"]((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(f(i)(a)))(fu);
                    };
                };
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var ifindOf = function (p) {
    return function (f) {
        return ifoldrOf(p)(function (i) {
            return function (a) {
                return Data_Maybe.maybe((function () {
                    var $32 = f(i)(a);
                    if ($32) {
                        return new Data_Maybe.Just(a);
                    };
                    if (!$32) {
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match at Data.Lens.Fold line 249, column 21 - line 249, column 54: " + [ $32.constructor.name ]);
                })())(Data_Maybe.Just.create);
            };
        })(Data_Maybe.Nothing.value);
    };
};
var ianyOf = function (dictHeytingAlgebra) {
    return function (p) {
        return function (f) {
            return function ($43) {
                return Data_Monoid_Disj.runDisj(ifoldMapOf(p)(function (i) {
                    return function ($44) {
                        return Data_Monoid_Disj.Disj(f(i)($44));
                    };
                })($43));
            };
        };
    };
};
var iallOf = function (dictHeytingAlgebra) {
    return function (p) {
        return function (f) {
            return function ($45) {
                return Data_Monoid_Conj.runConj(ifoldMapOf(p)(function (i) {
                    return function ($46) {
                        return Data_Monoid_Conj.Conj(f(i)($46));
                    };
                })($45));
            };
        };
    };
};
var folded = function (dictMonoid) {
    return function (dictFoldable) {
        return function ($47) {
            return Data_Lens_Internal_Forget.Forget(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(Data_Lens_Internal_Forget.runForget($47)));
        };
    };
};
var foldOf = function (p) {
    return Data_Lens_Internal_Forget.runForget(p(Control_Category.id(Control_Category.categoryFn)));
};
var foldMapOf = function (p) {
    return function (f) {
        return Data_Lens_Internal_Forget.runForget(p(f));
    };
};
var foldlOf = function (p) {
    return function (f) {
        return function (r) {
            return function ($48) {
                return Data_Function.flip(Data_Monoid_Endo.runEndo)(r)(Data_Monoid_Dual.runDual(foldMapOf(p)(function ($49) {
                    return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(f)($49)));
                })($48)));
            };
        };
    };
};
var foldrOf = function (p) {
    return function (f) {
        return function (r) {
            return function ($50) {
                return Data_Function.flip(Data_Monoid_Endo.runEndo)(r)(foldMapOf(p)(function ($51) {
                    return Data_Monoid_Endo.Endo(f($51));
                })($50));
            };
        };
    };
};
var maximumOf = function (dictOrd) {
    return function (p) {
        var max = function (a) {
            return function (b) {
                var $33 = Data_Ord.greaterThan(dictOrd)(a)(b);
                if ($33) {
                    return a;
                };
                if (!$33) {
                    return b;
                };
                throw new Error("Failed pattern match at Data.Lens.Fold line 109, column 13 - line 109, column 35: " + [ $33.constructor.name ]);
            };
        };
        return foldrOf(p)(function (a) {
            return function ($52) {
                return Data_Maybe.Just.create(Data_Maybe.maybe(a)(max(a))($52));
            };
        })(Data_Maybe.Nothing.value);
    };
};
var minimumOf = function (dictOrd) {
    return function (p) {
        var min = function (a) {
            return function (b) {
                var $34 = Data_Ord.lessThan(dictOrd)(a)(b);
                if ($34) {
                    return a;
                };
                if (!$34) {
                    return b;
                };
                throw new Error("Failed pattern match at Data.Lens.Fold line 114, column 13 - line 114, column 35: " + [ $34.constructor.name ]);
            };
        };
        return foldrOf(p)(function (a) {
            return function ($53) {
                return Data_Maybe.Just.create(Data_Maybe.maybe(a)(min(a))($53));
            };
        })(Data_Maybe.Nothing.value);
    };
};
var toListOf = function (p) {
    return foldrOf(p)(Data_List.Cons.create)(Data_List.Nil.value);
};
var toListOfOn = function (s) {
    return function (p) {
        return toListOf(p)(s);
    };
};
var traverseOf_ = function (dictApplicative) {
    return function (p) {
        return function (f) {
            return foldrOf(p)(function (a) {
                return function (fu) {
                    return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor["void"]((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(f(a)))(fu);
                };
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var has = function (dictHeytingAlgebra) {
    return function (p) {
        return function ($54) {
            return Data_Monoid_Disj.runDisj(foldMapOf(p)(Data_Function["const"](Data_HeytingAlgebra.tt(dictHeytingAlgebra)))($54));
        };
    };
};
var hasn$primet = function (dictHeytingAlgebra) {
    return function (p) {
        return function ($55) {
            return Data_Monoid_Conj.runConj(foldMapOf(p)(Data_Function["const"](Data_HeytingAlgebra.ff(dictHeytingAlgebra)))($55));
        };
    };
};
var lastOf = function (p) {
    return function ($56) {
        return Data_Maybe_Last.runLast(foldMapOf(p)(function ($57) {
            return Data_Maybe_Last.Last(Data_Maybe.Just.create($57));
        })($56));
    };
};
var lengthOf = function (p) {
    return function ($58) {
        return Data_Monoid_Additive.runAdditive(foldMapOf(p)(Data_Function.apply(Data_Function["const"])(1))($58));
    };
};
var preview = function (p) {
    return function ($59) {
        return Data_Maybe_First.runFirst(foldMapOf(p)(function ($60) {
            return Data_Maybe_First.First(Data_Maybe.Just.create($60));
        })($59));
    };
};
var previewOn = function (s) {
    return function (p) {
        return preview(p)(s);
    };
};
var productOf = function (dictSemiring) {
    return function (p) {
        return function ($61) {
            return Data_Monoid_Multiplicative.runMultiplicative(foldMapOf(p)(Data_Monoid_Multiplicative.Multiplicative)($61));
        };
    };
};
var sequenceOf_ = function (dictApplicative) {
    return function (p) {
        return function ($62) {
            return Data_Function.flip(Data_Monoid_Endo.runEndo)(Control_Applicative.pure(dictApplicative)(Data_Unit.unit))(foldMapOf(p)(function (f) {
                return function (v) {
                    return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f)(v);
                };
            })($62));
        };
    };
};
var sumOf = function (dictSemiring) {
    return function (p) {
        return function ($63) {
            return Data_Monoid_Additive.runAdditive(foldMapOf(p)(Data_Monoid_Additive.Additive)($63));
        };
    };
};
var firstOf = function (p) {
    return function ($64) {
        return Data_Maybe_First.runFirst(foldMapOf(p)(function ($65) {
            return Data_Maybe_First.First(Data_Maybe.Just.create($65));
        })($64));
    };
};
var findOf = function (p) {
    return function (f) {
        return foldrOf(p)(function (a) {
            return Data_Maybe.maybe((function () {
                var $35 = f(a);
                if ($35) {
                    return new Data_Maybe.Just(a);
                };
                if (!$35) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.Lens.Fold line 118, column 38 - line 118, column 69: " + [ $35.constructor.name ]);
            })())(Data_Maybe.Just.create);
        })(Data_Maybe.Nothing.value);
    };
};
var filtered = function (dictChoice) {
    return function (f) {
        return function ($66) {
            return Data_Profunctor.dimap(dictChoice["__superclass_Data.Profunctor.Profunctor_0"]())(function (x) {
                var $36 = f(x);
                if ($36) {
                    return new Data_Either.Right(x);
                };
                if (!$36) {
                    return new Data_Either.Left(x);
                };
                throw new Error("Failed pattern match at Data.Lens.Fold line 163, column 14 - line 163, column 45: " + [ $36.constructor.name ]);
            })(Data_Either.either(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn)))(Data_Profunctor_Choice.right(dictChoice)($66));
        };
    };
};
var anyOf = function (dictBooleanAlgebra) {
    return function (p) {
        return function (f) {
            return function ($67) {
                return Data_Monoid_Disj.runDisj(foldMapOf(p)(function ($68) {
                    return Data_Monoid_Disj.Disj(f($68));
                })($67));
            };
        };
    };
};
var elemOf = function (dictEq) {
    return function (p) {
        return function (a) {
            return anyOf(Data_BooleanAlgebra.booleanAlgebraBoolean)(p)(function (v) {
                return Data_Eq.eq(dictEq)(v)(a);
            });
        };
    };
};
var orOf = function (dictBooleanAlgebra) {
    return function (p) {
        return anyOf(dictBooleanAlgebra)(p)(Control_Category.id(Control_Category.categoryFn));
    };
};
var allOf = function (dictBooleanAlgebra) {
    return function (p) {
        return function (f) {
            return function ($69) {
                return Data_Monoid_Conj.runConj(foldMapOf(p)(function ($70) {
                    return Data_Monoid_Conj.Conj(f($70));
                })($69));
            };
        };
    };
};
var andOf = function (dictBooleanAlgebra) {
    return function (p) {
        return allOf(dictBooleanAlgebra)(p)(Control_Category.id(Control_Category.categoryFn));
    };
};
var notElemOf = function (dictEq) {
    return function (p) {
        return function (a) {
            return allOf(Data_BooleanAlgebra.booleanAlgebraBoolean)(p)(function (v) {
                return Data_Eq.notEq(dictEq)(v)(a);
            });
        };
    };
};
module.exports = {
    allOf: allOf, 
    andOf: andOf, 
    anyOf: anyOf, 
    elemOf: elemOf, 
    filtered: filtered, 
    findOf: findOf, 
    firstOf: firstOf, 
    foldMapOf: foldMapOf, 
    foldOf: foldOf, 
    folded: folded, 
    foldlOf: foldlOf, 
    foldrOf: foldrOf, 
    has: has, 
    "hasn't": hasn$primet, 
    iallOf: iallOf, 
    ianyOf: ianyOf, 
    ifoldMapOf: ifoldMapOf, 
    ifoldlOf: ifoldlOf, 
    ifoldrOf: ifoldrOf, 
    itoListOf: itoListOf, 
    itraverseOf_: itraverseOf_, 
    lastOf: lastOf, 
    lengthOf: lengthOf, 
    maximumOf: maximumOf, 
    minimumOf: minimumOf, 
    notElemOf: notElemOf, 
    orOf: orOf, 
    preview: preview, 
    previewOn: previewOn, 
    productOf: productOf, 
    replicated: replicated, 
    sequenceOf_: sequenceOf_, 
    sumOf: sumOf, 
    toListOf: toListOf, 
    toListOfOn: toListOfOn, 
    unfolded: unfolded
};
