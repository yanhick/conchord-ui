// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Data_Array = require("../Data.Array");
var Data_Array_Partial = require("../Data.Array.Partial");
var Data_Char = require("../Data.Char");
var Data_Either = require("../Data.Either");
var Data_Identity = require("../Data.Identity");
var Data_Int = require("../Data.Int");
var Data_Lazy = require("../Data.Lazy");
var Data_List = require("../Data.List");
var Data_Maybe = require("../Data.Maybe");
var Data_String = require("../Data.String");
var Data_Tuple = require("../Data.Tuple");
var $$Math = require("../Math");
var Partial_Unsafe = require("../Partial.Unsafe");
var Test_StrongCheck_Gen = require("../Test.StrongCheck.Gen");
var Control_Bind = require("../Control.Bind");
var Control_Applicative = require("../Control.Applicative");
var Data_Ord = require("../Data.Ord");
var Data_Function = require("../Data.Function");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Semiring = require("../Data.Semiring");
var Data_Ring = require("../Data.Ring");
var Data_Bounded = require("../Data.Bounded");
var Data_Functor = require("../Data.Functor");
var Data_Unit = require("../Data.Unit");
var Data_Ordering = require("../Data.Ordering");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Eq = require("../Data.Eq");
var Control_Category = require("../Control.Category");
var Control_Apply = require("../Control.Apply");
var Control_Monad_Free = require("../Control.Monad.Free");
var Arbitrary = function (arbitrary) {
    this.arbitrary = arbitrary;
};
var Coarbitrary = function (coarbitrary) {
    this.coarbitrary = coarbitrary;
};
var coarbitrary = function (dict) {
    return dict.coarbitrary;
};
var coarbUnit = new Coarbitrary(function (v) {
    return Test_StrongCheck_Gen.perturbGen(Control_Monad_Free.freeMonad)(1.0);
});
var coarbTuple = function (dictCoarbitrary) {
    return function (dictCoarbitrary1) {
        return new Coarbitrary(function (v) {
            return function ($62) {
                return coarbitrary(dictCoarbitrary1)(v.value1)(coarbitrary(dictCoarbitrary)(v.value0)($62));
            };
        });
    };
};
var coarbOrdering = new Coarbitrary(function (v) {
    if (v instanceof Data_Ordering.LT) {
        return Test_StrongCheck_Gen.perturbGen(Control_Monad_Free.freeMonad)(1.0);
    };
    if (v instanceof Data_Ordering.EQ) {
        return Test_StrongCheck_Gen.perturbGen(Control_Monad_Free.freeMonad)(2.0);
    };
    if (v instanceof Data_Ordering.GT) {
        return Test_StrongCheck_Gen.perturbGen(Control_Monad_Free.freeMonad)(3.0);
    };
    throw new Error("Failed pattern match at Test.StrongCheck.Arbitrary line 88, column 3 - line 89, column 3: " + [ v.constructor.name ]);
});
var coarbNumber = new Coarbitrary(Test_StrongCheck_Gen.perturbGen(Control_Monad_Free.freeMonad));
var coarbMaybe = function (dictCoarbitrary) {
    return new Coarbitrary(function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Test_StrongCheck_Gen.perturbGen(Control_Monad_Free.freeMonad)(1.0);
        };
        if (v instanceof Data_Maybe.Just) {
            return coarbitrary(dictCoarbitrary)(v.value0);
        };
        throw new Error("Failed pattern match at Test.StrongCheck.Arbitrary line 128, column 3 - line 129, column 3: " + [ v.constructor.name ]);
    });
};
var coarbLazy = function (dictCoarbitrary) {
    return new Coarbitrary(function (a) {
        return coarbitrary(dictCoarbitrary)(Data_Lazy.force(a));
    });
};
var coarbInt = new Coarbitrary(function ($63) {
    return Test_StrongCheck_Gen.perturbGen(Control_Monad_Free.freeMonad)(Data_Int.toNumber($63));
});
var coarbIdentity = function (dictCoarbitrary) {
    return new Coarbitrary(function (v) {
        return coarbitrary(dictCoarbitrary)(v);
    });
};
var coarbEither = function (dictCoarbitrary) {
    return function (dictCoarbitrary1) {
        return new Coarbitrary(function (v) {
            if (v instanceof Data_Either.Left) {
                return coarbitrary(dictCoarbitrary)(v.value0);
            };
            if (v instanceof Data_Either.Right) {
                return coarbitrary(dictCoarbitrary1)(v.value0);
            };
            throw new Error("Failed pattern match at Test.StrongCheck.Arbitrary line 137, column 3 - line 137, column 40: " + [ v.constructor.name ]);
        });
    };
};
var coarbChar = new Coarbitrary(function (c) {
    return Data_Function.apply(coarbitrary(coarbInt))(Data_Char.toCharCode(c));
});
var coarbBoolean = new Coarbitrary(function (v) {
    if (v) {
        return Test_StrongCheck_Gen.perturbGen(Control_Monad_Free.freeMonad)(1.0);
    };
    if (!v) {
        return Test_StrongCheck_Gen.perturbGen(Control_Monad_Free.freeMonad)(2.0);
    };
    throw new Error("Failed pattern match at Test.StrongCheck.Arbitrary line 49, column 3 - line 50, column 3: " + [ v.constructor.name ]);
});
var coarbArray = function (dictCoarbitrary) {
    return new Coarbitrary(Partial_Unsafe.unsafePartial(function (dictPartial) {
        return function (arr) {
            var $50 = Data_Array.length(arr) === 0;
            if ($50) {
                return Control_Category.id(Control_Category.categoryFn);
            };
            if (!$50) {
                var xs = Data_Array_Partial.tail(dictPartial)(arr);
                var x = Data_Array_Partial.head(dictPartial)(arr);
                return function ($64) {
                    return coarbitrary(coarbArray(dictCoarbitrary))(xs)(coarbitrary(dictCoarbitrary)(x)($64));
                };
            };
            throw new Error("Failed pattern match at Test.StrongCheck.Arbitrary line 102, column 5 - line 106, column 45: " + [ $50.constructor.name ]);
        };
    }));
};
var coarbList = function (dictCoarbitrary) {
    return new Coarbitrary(function ($65) {
        return coarbitrary(coarbArray(dictCoarbitrary))(Data_Array.fromFoldable(Data_List.foldableList)($65));
    });
};
var coarbString = new Coarbitrary(function (s) {
    return Data_Function.apply(coarbitrary(coarbArray(coarbMaybe(coarbInt))))(Data_Functor.map(Data_Functor.functorArray)(Data_String.charCodeAt(0))(Data_String.split("")(s)));
});
var arbitrary = function (dict) {
    return dict.arbitrary;
};
var arbitraryIdentity = function (dictArbitrary) {
    return new Arbitrary(Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_Identity.Identity)(arbitrary(dictArbitrary)));
};
var arbitraryLazy = function (dictArbitrary) {
    return new Arbitrary(Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(dictArbitrary))(function ($66) {
        return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Data_Lazy.defer(Data_Function["const"]($66)));
    }));
};
var coarbFunction = function (dictArbitrary) {
    return function (dictCoarbitrary) {
        return new Coarbitrary(function (f) {
            return function (gen) {
                return Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(dictArbitrary))(function (v) {
                    return coarbitrary(dictCoarbitrary)(f(v))(gen);
                });
            };
        });
    };
};
var arbUnit = new Arbitrary(Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Data_Unit.unit));
var arbTuple = function (dictArbitrary) {
    return function (dictArbitrary1) {
        return new Arbitrary(Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_Tuple.Tuple.create)(arbitrary(dictArbitrary)))(arbitrary(dictArbitrary1)));
    };
};
var arbOrdering = new Arbitrary(Test_StrongCheck_Gen.oneOf(Control_Monad_Free.freeMonad)(Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Data_Ordering.LT.value))([ Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Data_Ordering.EQ.value), Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Data_Ordering.GT.value) ]));
var arbNumber = new Arbitrary(Test_StrongCheck_Gen.uniform(Control_Monad_Free.freeMonad));
var arbInt = new Arbitrary(Partial_Unsafe.unsafePartial(function (dictPartial) {
    return Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(Test_StrongCheck_Gen.uniform(Control_Monad_Free.freeMonad))(function (v) {
        return Data_Function.apply(function ($67) {
            return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Data_Maybe.fromJust(dictPartial)(Data_Int.fromNumber($$Math.floor($67))));
        })(Data_Int.toNumber((Data_Bounded.top(Data_Bounded.boundedInt) - Data_Bounded.bottom(Data_Bounded.boundedInt)) + Data_Bounded.bottom(Data_Bounded.boundedInt) | 0) * v);
    });
}));
var arbFunction = function (dictCoarbitrary) {
    return function (dictArbitrary) {
        return new Arbitrary(Test_StrongCheck_Gen.repeatable(function (a) {
            return coarbitrary(dictCoarbitrary)(a)(arbitrary(dictArbitrary));
        }));
    };
};
var arbChar = new Arbitrary(Test_StrongCheck_Gen.charGen(Control_Monad_Free.freeMonad));
var arbBoolean = new Arbitrary(Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(Test_StrongCheck_Gen.uniform(Control_Monad_Free.freeMonad))(function (v) {
    return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(v < 0.5);
}));
var arbEither = function (dictArbitrary) {
    return function (dictArbitrary1) {
        return new Arbitrary(Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(arbBoolean))(function (v) {
            if (v) {
                return Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_Either.Left.create)(arbitrary(dictArbitrary));
            };
            if (!v) {
                return Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_Either.Right.create)(arbitrary(dictArbitrary1));
            };
            throw new Error("Failed pattern match at Test.StrongCheck.Arbitrary line 134, column 5 - line 134, column 58: " + [ v.constructor.name ]);
        }));
    };
};
var arbMaybe = function (dictArbitrary) {
    return new Arbitrary(Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(arbBoolean))(function (v) {
        if (v) {
            return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(Data_Maybe.Nothing.value);
        };
        if (!v) {
            return Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_Maybe.Just.create)(arbitrary(dictArbitrary));
        };
        throw new Error("Failed pattern match at Test.StrongCheck.Arbitrary line 125, column 5 - line 125, column 51: " + [ v.constructor.name ]);
    }));
};
var arbArray = function (dictArbitrary) {
    return new Arbitrary(Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(arbBoolean))(function (v) {
        if (v) {
            return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))([  ]);
        };
        if (!v) {
            return Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(dictArbitrary))(function (v1) {
                return Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(arbitrary(arbArray(dictArbitrary)))(function (v2) {
                    return Data_Function.apply(Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad)))(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ v1 ])(v2));
                });
            });
        };
        throw new Error("Failed pattern match at Test.StrongCheck.Arbitrary line 95, column 5 - line 98, column 23: " + [ v.constructor.name ]);
    }));
};
var arbList = function (dictArbitrary) {
    return new Arbitrary(Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_Array.toUnfoldable(Data_List.unfoldableList))(arbitrary(arbArray(dictArbitrary))));
};
var arbString = new Arbitrary(Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_String.fromCharArray)(arbitrary(arbArray(arbChar))));
module.exports = {
    Arbitrary: Arbitrary, 
    Coarbitrary: Coarbitrary, 
    arbitrary: arbitrary, 
    coarbitrary: coarbitrary, 
    arbBoolean: arbBoolean, 
    coarbBoolean: coarbBoolean, 
    arbNumber: arbNumber, 
    coarbNumber: coarbNumber, 
    arbInt: arbInt, 
    coarbInt: coarbInt, 
    arbString: arbString, 
    coarbString: coarbString, 
    arbChar: arbChar, 
    coarbChar: coarbChar, 
    arbUnit: arbUnit, 
    coarbUnit: coarbUnit, 
    arbOrdering: arbOrdering, 
    coarbOrdering: coarbOrdering, 
    arbArray: arbArray, 
    coarbArray: coarbArray, 
    arbFunction: arbFunction, 
    coarbFunction: coarbFunction, 
    arbTuple: arbTuple, 
    coarbTuple: coarbTuple, 
    arbMaybe: arbMaybe, 
    coarbMaybe: coarbMaybe, 
    arbEither: arbEither, 
    coarbEither: coarbEither, 
    arbList: arbList, 
    coarbList: coarbList, 
    arbitraryIdentity: arbitraryIdentity, 
    coarbIdentity: coarbIdentity, 
    arbitraryLazy: arbitraryLazy, 
    coarbLazy: coarbLazy
};
