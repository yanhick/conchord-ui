// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Data_Array = require("../Data.Array");
var Data_Either = require("../Data.Either");
var Data_Enum = require("../Data.Enum");
var Data_Foldable = require("../Data.Foldable");
var Data_Functor_Invariant = require("../Data.Functor.Invariant");
var Data_Int = require("../Data.Int");
var Data_List = require("../Data.List");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_String = require("../Data.String");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Test_StrongCheck_Arbitrary = require("../Test.StrongCheck.Arbitrary");
var Test_StrongCheck_Data_ArbBoundedEnum = require("../Test.StrongCheck.Data.ArbBoundedEnum");
var Test_StrongCheck_Data_Signum = require("../Test.StrongCheck.Data.Signum");
var Test_StrongCheck_Gen = require("../Test.StrongCheck.Gen");
var $$Math = require("../Math");
var Data_Functor = require("../Data.Functor");
var Data_Ord = require("../Data.Ord");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Semiring = require("../Data.Semiring");
var Control_Applicative = require("../Control.Applicative");
var Data_Eq = require("../Data.Eq");
var Control_Bind = require("../Control.Bind");
var Data_Function = require("../Data.Function");
var Data_Ring = require("../Data.Ring");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Control_Monad_Free = require("../Control.Monad.Free");
var Data_Semigroup = require("../Data.Semigroup");
var Control_Apply = require("../Control.Apply");
var Perturber = function (x) {
    return x;
};
var Attempts = function (x) {
    return x;
};
var Perturb = function (perturber) {
    this.perturber = perturber;
};
var unPerturber = function (v) {
    return v;
};
var square = Data_Function.flip($$Math.pow)(2.0);
var toDist = function (dictFoldable) {
    return function (dictFunctor) {
        return function (xs) {
            return $$Math.sqrt(Data_Function.apply(Data_Foldable.sum(dictFoldable)(Data_Semiring.semiringNumber))(Data_Functor.map(dictFunctor)(square)(xs)));
        };
    };
};
var perturberSum = function (v) {
    return function (v1) {
        var perturb$prime = function (d) {
            return function (v2) {
                if (v2 instanceof Data_Either.Left) {
                    return Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_Either.Left.create)(v.perturb(d)(v2.value0));
                };
                if (v2 instanceof Data_Either.Right) {
                    return Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_Either.Right.create)(v1.perturb(d)(v2.value0));
                };
                throw new Error("Failed pattern match at Test.StrongCheck.Perturb line 137, column 3 - line 137, column 29: " + [ d.constructor.name, v2.constructor.name ]);
            };
        };
        var dist$prime = function (v2) {
            return function (v3) {
                if (v2 instanceof Data_Either.Left && v3 instanceof Data_Either.Left) {
                    return v.dist(v2.value0)(v3.value0);
                };
                if (v2 instanceof Data_Either.Right && v3 instanceof Data_Either.Right) {
                    return v1.dist(v2.value0)(v3.value0);
                };
                return 1.0;
            };
        };
        var dims$prime = function (v2) {
            if (v2 instanceof Data_Either.Left) {
                return v.dims(v2.value0);
            };
            if (v2 instanceof Data_Either.Right) {
                return v1.dims(v2.value0);
            };
            throw new Error("Failed pattern match at Test.StrongCheck.Perturb line 130, column 1 - line 138, column 29: " + [ v2.constructor.name ]);
        };
        return {
            perturb: perturb$prime, 
            dist: dist$prime, 
            dims: dims$prime
        };
    };
};
var perturberInvariant = new Data_Functor_Invariant.Invariant(function (f) {
    return function (g) {
        return function (v) {
            return {
                perturb: function (n) {
                    return function (b) {
                        return Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(f)(v.perturb(n)(g(b)));
                    };
                }, 
                dist: function (b1) {
                    return function (b2) {
                        return v.dist(g(b1))(g(b2));
                    };
                }, 
                dims: function (b) {
                    return v.dims(g(b));
                }
            };
        };
    };
});
var perturber = function (dict) {
    return dict.perturber;
};
var perturbChar = new Perturb((function () {
    var perturb$prime = function (n) {
        return function (e) {
            var $56 = n < 1.0 / (2.0 * 65536.0);
            if ($56) {
                return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(e);
            };
            if (!$56) {
                return Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbChar);
            };
            throw new Error("Failed pattern match at Test.StrongCheck.Perturb line 246, column 20 - line 246, column 89: " + [ $56.constructor.name ]);
        };
    };
    var dist$prime = function (a) {
        return function (b) {
            var $57 = a === b;
            if ($57) {
                return 0.0;
            };
            if (!$57) {
                return 1.0 / (2.0 * 65536.0);
            };
            throw new Error("Failed pattern match at Test.StrongCheck.Perturb line 247, column 17 - line 247, column 62: " + [ $57.constructor.name ]);
        };
    };
    var dims$prime = Data_Function["const"](1.0);
    return {
        perturb: perturb$prime, 
        dist: dist$prime, 
        dims: dims$prime
    };
})());
var perturbArbBoundedEnum = function (dictBoundedEnum) {
    return function (dictEq) {
        return new Perturb((function () {
            var perturb$prime = function (n) {
                return function (e) {
                    var sz = Data_Enum.runCardinality(Data_Enum.cardinality(Test_StrongCheck_Data_ArbBoundedEnum.enumArbBoundedEnum(dictBoundedEnum)));
                    var $58 = n < 1.0 / (2.0 * Data_Int.toNumber(sz));
                    if ($58) {
                        return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(e);
                    };
                    if (!$58) {
                        return Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Test_StrongCheck_Data_ArbBoundedEnum.runArbBoundedEnum)(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Data_ArbBoundedEnum.arbArbBoundedEnum(Test_StrongCheck_Data_ArbBoundedEnum.enumArbBoundedEnum(dictBoundedEnum))));
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck.Perturb line 194, column 10 - line 194, column 93: " + [ $58.constructor.name ]);
                };
            };
            var dist$prime = function (a) {
                return function (b) {
                    var sz = Data_Enum.runCardinality(Data_Enum.cardinality(dictBoundedEnum));
                    var $59 = Data_Eq.eq(dictEq)(Test_StrongCheck_Data_ArbBoundedEnum.runArbBoundedEnum(a))(Test_StrongCheck_Data_ArbBoundedEnum.runArbBoundedEnum(b));
                    if ($59) {
                        return 0.0;
                    };
                    if (!$59) {
                        return 1.0 / (2.0 * Data_Int.toNumber(sz));
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck.Perturb line 197, column 10 - line 197, column 95: " + [ $59.constructor.name ]);
                };
            };
            var dims$prime = function (e) {
                var sz = Data_Enum.runCardinality(Data_Enum.cardinality(dictBoundedEnum));
                var $60 = sz <= 0;
                if ($60) {
                    return 0.0;
                };
                if (!$60) {
                    return 1.0;
                };
                throw new Error("Failed pattern match at Test.StrongCheck.Perturb line 200, column 10 - line 202, column 1: " + [ $60.constructor.name ]);
            };
            return {
                perturb: perturb$prime, 
                dist: dist$prime, 
                dims: dims$prime
            };
        })());
    };
};
var perturb = function (dictPerturb) {
    return (unPerturber(perturber(dictPerturb))).perturb;
};
var searchIn$prime = function (dictPerturb) {
    return function (v) {
        return function (n) {
            return function (f) {
                return function (a) {
                    var search0 = function (k1) {
                        return function (d) {
                            var $65 = k1 <= 0;
                            if ($65) {
                                return Data_Monoid.mempty(Test_StrongCheck_Gen.monoidGenT(Control_Monad_Free.freeMonad));
                            };
                            if (!$65) {
                                return Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_Foldable.find(Data_Foldable.foldableArray)(f))(Data_Function.apply(Test_StrongCheck_Gen.takeGen(Control_Monad_Free.freeMonad)(1))(Test_StrongCheck_Gen.chunked(Control_Monad_Free.freeMonad)(n)(perturb(dictPerturb)(d)(a)))))(function (v1) {
                                    return Data_Semigroup.append(Test_StrongCheck_Gen.semigroupGenT(Control_Monad_Free.freeMonad))(Data_Maybe.fromMaybe(Data_Monoid.mempty(Test_StrongCheck_Gen.monoidGenT(Control_Monad_Free.freeMonad)))(Data_Functor.map(Data_Maybe.functorMaybe)(Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad)))(v1)))(search0(k1 - 1)(d / 2.0));
                                });
                            };
                            throw new Error("Failed pattern match at Test.StrongCheck.Perturb line 101, column 5 - line 105, column 66: " + [ $65.constructor.name ]);
                        };
                    };
                    return search0(v)(1.0);
                };
            };
        };
    };
};
var searchIn = function (dictPerturb) {
    return searchIn$prime(dictPerturb)(1000)(10);
};
var nonPerturber = {
    perturb: Data_Function["const"](Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))), 
    dist: Data_Function.apply(Data_Function["const"])(Data_Function["const"](0)), 
    dims: Data_Function["const"](0)
};
var maxNumber = 9.007199254740992e15;
var k0 = $$Math.log(maxNumber + 1.0);
var perturbInt = new Perturb((function () {
    var perturb$prime = function (v) {
        return function (n) {
            if (v === 0.0) {
                return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(n);
            };
            return Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(Test_StrongCheck_Gen.uniform(Control_Monad_Free.freeMonad))(function (v1) {
                return Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Test_StrongCheck_Data_Signum.runSignum)(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Data_Signum.arbSignum)))(function (v2) {
                    return Data_Function.apply(Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad)))(Data_Function.apply(Data_Maybe.fromMaybe(n))(Data_Function.apply(Data_Int.fromNumber)($$Math.round(Data_Int.toNumber(v2) * ($$Math.exp(k0 * (v1 * v)) - 1.0) + Data_Int.toNumber(n)))));
                });
            });
        };
    };
    var dist$prime = function (a) {
        return function (b) {
            var from = function (y) {
                return $$Math.log(y + 1.0) / k0;
            };
            return Data_Function.apply(function ($97) {
                return $$Math.min(1.0)($$Math.abs(from($97)));
            })($$Math.abs(Data_Int.toNumber(a) - Data_Int.toNumber(b)));
        };
    };
    var dims$prime = Data_Function["const"](1.0);
    return {
        perturb: perturb$prime, 
        dist: dist$prime, 
        dims: dims$prime
    };
})());
var perturbNumber = new Perturb((function () {
    var perturb$prime = function (v) {
        return function (n) {
            if (v === 0.0) {
                return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(n);
            };
            return Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(Test_StrongCheck_Gen.uniform(Control_Monad_Free.freeMonad))(function (v1) {
                return Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Test_StrongCheck_Data_Signum.runSignum)(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Data_Signum.arbSignum)))(function (v2) {
                    return Data_Function.apply(Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad)))(Data_Int.toNumber(v2) * ($$Math.exp(k0 * (v1 * v)) - 1.0) + n);
                });
            });
        };
    };
    var dist$prime = function (a) {
        return function (b) {
            var from = function (y) {
                return $$Math.log(y + 1.0) / k0;
            };
            return Data_Function.apply(function ($98) {
                return $$Math.min(1.0)($$Math.abs(from($98)));
            })($$Math.abs(a - b));
        };
    };
    var dims$prime = Data_Function["const"](1.0);
    return {
        perturb: perturb$prime, 
        dist: dist$prime, 
        dims: dims$prime
    };
})());
var enumerated = function (dictEq) {
    return function (x) {
        return function (xs) {
            var len = 1 + Data_Array.length(xs) | 0;
            var dims$prime = function (a) {
                var $75 = len > 0;
                if ($75) {
                    return 1.0;
                };
                if (!$75) {
                    return 0.0;
                };
                throw new Error("Failed pattern match at Test.StrongCheck.Perturb line 187, column 13 - line 189, column 1: " + [ $75.constructor.name ]);
            };
            var cutoff = 1.0 / (2.0 * Data_Int.toNumber(len));
            var dist$prime = function (a1) {
                return function (a2) {
                    var $76 = Data_Eq.eq(dictEq)(a2)(a2);
                    if ($76) {
                        return 0.0;
                    };
                    if (!$76) {
                        return cutoff;
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck.Perturb line 186, column 17 - line 186, column 49: " + [ $76.constructor.name ]);
                };
            };
            var perturb$prime = function (n) {
                return function (a) {
                    var $77 = n < cutoff;
                    if ($77) {
                        return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(a);
                    };
                    if (!$77) {
                        return Data_Function.apply(Test_StrongCheck_Gen.elements(Control_Monad_Free.freeMonad)(x))(Data_List.fromFoldable(Data_Foldable.foldableArray)(xs));
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck.Perturb line 185, column 18 - line 185, column 79: " + [ $77.constructor.name ]);
                };
            };
            return {
                perturb: perturb$prime, 
                dist: dist$prime, 
                dims: dims$prime
            };
        };
    };
};
var dist = function (dictPerturb) {
    return (unPerturber(perturber(dictPerturb))).dist;
};
var perturbBoolean = new Perturb((function () {
    var perturb$prime = function (n) {
        return function (e) {
            return Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Test_StrongCheck_Data_ArbBoundedEnum.runArbBoundedEnum)(perturb(perturbArbBoundedEnum(Data_Enum.boundedEnumBoolean)(Data_Eq.eqBoolean))(n)(e));
        };
    };
    var dist$prime = function (a) {
        return function (b) {
            return dist(perturbArbBoundedEnum(Data_Enum.boundedEnumBoolean)(Data_Eq.eqBoolean))(a)(b);
        };
    };
    var dims$prime = Data_Function["const"](1.0);
    return {
        perturb: perturb$prime, 
        dist: dist$prime, 
        dims: dims$prime
    };
})());
var dims = function (dictPerturb) {
    return (unPerturber(perturber(dictPerturb))).dims;
};
var delta = function (n) {
    return function (d) {
        return $$Math.sqrt((d * d) / n);
    };
};
var perturbList = function (dictPerturb) {
    return new Perturb((function () {
        var perturb$prime = function (v) {
            return function (v1) {
                if (v1 instanceof Data_List.Nil) {
                    return Data_Function.apply(Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad)))(Data_List.Nil.value);
                };
                if (v === 0.0) {
                    return Data_Function.apply(Data_Traversable.sequence(Data_List.traversableList)(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad)))(Data_Functor.map(Data_List.functorList)(perturb(dictPerturb)(0.0))(v1));
                };
                var dx = delta(Data_Function.apply(Data_Int.toNumber)(Data_List.length(v1)))(v);
                return Data_Function.apply(Data_Traversable.sequence(Data_List.traversableList)(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad)))(Data_Functor.map(Data_List.functorList)(perturb(dictPerturb)(dx))(v1));
            };
        };
        var dist$prime = function (a) {
            return function (b) {
                return Data_Function.apply(toDist(Data_List.foldableList)(Data_List.functorList))(Data_List.zipWith(dist(dictPerturb))(a)(b));
            };
        };
        var dims$prime = function ($99) {
            return Data_Int.toNumber(Data_List.length($99));
        };
        return {
            perturb: perturb$prime, 
            dist: dist$prime, 
            dims: dims$prime
        };
    })());
};
var perturbString = new Perturb((function () {
    var perturb$prime = function (d) {
        return function (s) {
            return Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(function ($100) {
                return Data_String.fromCharArray(Data_Array.fromFoldable(Data_List.foldableList)($100));
            })(perturb(perturbList(perturbChar))(d)(Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_String.toCharArray(s))));
        };
    };
    var dist$prime = function (s1) {
        return function (s2) {
            return dist(perturbList(perturbChar))(Data_Function.apply(Data_List.fromFoldable(Data_Foldable.foldableArray))(Data_String.toCharArray(s1)))(Data_Function.apply(Data_List.fromFoldable(Data_Foldable.foldableArray))(Data_String.toCharArray(s2)));
        };
    };
    var dims$prime = function ($101) {
        return dims(perturbList(perturbChar))(Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_String.toCharArray($101)));
    };
    return {
        perturb: perturb$prime, 
        dist: dist$prime, 
        dims: dims$prime
    };
})());
var perturberProduct = function (v) {
    return function (v1) {
        var perturb$prime = function (d) {
            return function (v2) {
                var dx = delta(v.dims(v2.value0) + v1.dims(v2.value1))(d);
                var dx2 = dx * dx;
                var ld = Data_Function.apply($$Math.sqrt)(dx2 * v.dims(v2.value0));
                var rd = Data_Function.apply($$Math.sqrt)(dx2 * v1.dims(v2.value1));
                return Control_Apply.apply(Test_StrongCheck_Gen.applyGenT(Control_Monad_Free.freeMonad))(Data_Functor.map(Test_StrongCheck_Gen.functorGenT(Control_Monad_Free.freeMonad))(Data_Tuple.Tuple.create)(v.perturb(ld)(v2.value0)))(v1.perturb(rd)(v2.value1));
            };
        };
        var dist$prime = function (v2) {
            return function (v3) {
                return toDist(Data_Foldable.foldableArray)(Data_Functor.functorArray)([ v.dist(v2.value0)(v3.value0), v1.dist(v2.value1)(v3.value1) ]);
            };
        };
        var dims$prime = function (v2) {
            return v.dims(v2.value0) + v1.dims(v2.value1);
        };
        return {
            perturb: perturb$prime, 
            dist: dist$prime, 
            dims: dims$prime
        };
    };
};
var boundedInt = function (aInt) {
    return function (bInt) {
        var dist$prime = function (x) {
            return function (y) {
                return Data_Function.apply($$Math.abs)(Data_Int.toNumber(x - y));
            };
        };
        var dims$prime = Data_Function["const"](1.0);
        var b = Data_Int.toNumber(bInt);
        var a = Data_Int.toNumber(aInt);
        var l = Data_Function.apply($$Math.floor)(Data_Ord.min(Data_Ord.ordNumber)(a)(b));
        var u = Data_Function.apply($$Math.ceil)(Data_Ord.max(Data_Ord.ordNumber)(a)(b));
        var clamp = function (n) {
            return Data_Ord.max(Data_Ord.ordNumber)(l)(Data_Ord.min(Data_Ord.ordNumber)(u)(n));
        };
        var length = u - l;
        var perturb$prime = function (d) {
            return function (v) {
                return Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber))(function (v1) {
                    var n = Data_Function.apply($$Math.round)(clamp(Data_Int.toNumber(v) + d * length * v1));
                    var i = Data_Function.apply(Data_Maybe.fromMaybe(aInt + 1 | 0))(Data_Int.fromNumber(n));
                    return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(i);
                });
            };
        };
        return {
            perturb: perturb$prime, 
            dist: dist$prime, 
            dims: dims$prime
        };
    };
};
var bounded = function (a) {
    return function (b) {
        var u = Data_Ord.max(Data_Ord.ordNumber)(a)(b);
        var l = Data_Ord.min(Data_Ord.ordNumber)(a)(b);
        var length = u - l;
        var dist$prime = function (a1) {
            return function (b1) {
                return $$Math.abs(a1 - b1);
            };
        };
        var dims$prime = Data_Function["const"](1.0);
        var clamp = function (n) {
            return Data_Ord.max(Data_Ord.ordNumber)(l)(Data_Ord.min(Data_Ord.ordNumber)(u)(n));
        };
        var perturb$prime = function (d) {
            return function (v) {
                return Control_Bind.bind(Test_StrongCheck_Gen.bindGenT(Control_Monad_Free.freeMonad))(Test_StrongCheck_Arbitrary.arbitrary(Test_StrongCheck_Arbitrary.arbNumber))(function (v1) {
                    return Data_Function.apply(function ($102) {
                        return Control_Applicative.pure(Test_StrongCheck_Gen.applicativeGenT(Control_Monad_Free.freeMonad))(clamp($102));
                    })(v1 * length * d + v);
                });
            };
        };
        return {
            perturb: perturb$prime, 
            dist: dist$prime, 
            dims: dims$prime
        };
    };
};
module.exports = {
    Attempts: Attempts, 
    Perturber: Perturber, 
    Perturb: Perturb, 
    bounded: bounded, 
    boundedInt: boundedInt, 
    dims: dims, 
    dist: dist, 
    enumerated: enumerated, 
    nonPerturber: nonPerturber, 
    perturb: perturb, 
    perturber: perturber, 
    perturberProduct: perturberProduct, 
    perturberSum: perturberSum, 
    searchIn: searchIn, 
    "searchIn'": searchIn$prime, 
    unPerturber: unPerturber, 
    perturberInvariant: perturberInvariant, 
    perturbArbBoundedEnum: perturbArbBoundedEnum, 
    perturbNumber: perturbNumber, 
    perturbInt: perturbInt, 
    perturbList: perturbList, 
    perturbChar: perturbChar, 
    perturbBoolean: perturbBoolean, 
    perturbString: perturbString
};
