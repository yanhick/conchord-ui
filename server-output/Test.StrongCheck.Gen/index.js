// Generated by psc version 0.9.3
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Lazy = require("../Control.Lazy");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Monad_List_Trans = require("../Control.Monad.List.Trans");
var Control_Monad_Trampoline = require("../Control.Monad.Trampoline");
var Control_MonadPlus = require("../Control.MonadPlus");
var Control_MonadZero = require("../Control.MonadZero");
var Control_Plus = require("../Control.Plus");
var Data_Array = require("../Data.Array");
var Data_Array_Partial = require("../Data.Array.Partial");
var Data_Char = require("../Data.Char");
var Data_Foldable = require("../Data.Foldable");
var Data_Int = require("../Data.Int");
var Data_Int_Bits = require("../Data.Int.Bits");
var Data_Lazy = require("../Data.Lazy");
var Data_List = require("../Data.List");
var Data_Machine_Mealy = require("../Data.Machine.Mealy");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Monoid_Additive = require("../Data.Monoid.Additive");
var Data_Profunctor = require("../Data.Profunctor");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong");
var Data_Tuple = require("../Data.Tuple");
var $$Math = require("../Math");
var Partial_Unsafe = require("../Partial.Unsafe");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Functor = require("../Data.Functor");
var Control_Apply = require("../Control.Apply");
var Data_Function = require("../Data.Function");
var Control_Bind = require("../Control.Bind");
var Control_Applicative = require("../Control.Applicative");
var Control_Monad = require("../Control.Monad");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Control_Category = require("../Control.Category");
var Control_Monad_Free = require("../Control.Monad.Free");
var Data_Semiring = require("../Data.Semiring");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Ord = require("../Data.Ord");
var Data_Show = require("../Data.Show");
var Data_Ring = require("../Data.Ring");
var Data_Eq = require("../Data.Eq");
var GenState = (function () {
    function GenState(value0) {
        this.value0 = value0;
    };
    GenState.create = function (value0) {
        return new GenState(value0);
    };
    return GenState;
})();
var GenOut = (function () {
    function GenOut(value0) {
        this.value0 = value0;
    };
    GenOut.create = function (value0) {
        return new GenOut(value0);
    };
    return GenOut;
})();
var GenT = (function () {
    function GenT(value0) {
        this.value0 = value0;
    };
    GenT.create = function (value0) {
        return new GenT(value0);
    };
    return GenT;
})();
var wrapEffect = function (dictMonad) {
    return function (fa) {
        var g = function (v) {
            return new GenOut({
                state: v.value0, 
                value: v.value1
            });
        };
        return Data_Function.apply(GenT.create)(Data_Functor.map(Data_Machine_Mealy.functorMealy(dictMonad))(g)(Data_Profunctor_Strong.fanout(Data_Machine_Mealy.categoryMealy(dictMonad))(Data_Machine_Mealy.strongMealy(dictMonad))(Control_Category.id(Data_Machine_Mealy.categoryMealy(dictMonad)))(Data_Machine_Mealy.wrapEffect(dictMonad)(fa))));
    };
};
var unGenState = function (v) {
    return v.value0;
};
var unGenOut = function (v) {
    return v.value0;
};
var unGen = function (v) {
    return v.value0;
};
var transGen = function (dictMonad) {
    return function (f) {
        return function (b) {
            return function (v) {
                var loop = function (m1) {
                    return function (b2) {
                        var g = function (v1) {
                            if (v1 instanceof Data_Machine_Mealy.Halt) {
                                return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Machine_Mealy.Halt.value);
                            };
                            if (v1 instanceof Data_Machine_Mealy.Emit) {
                                var $141 = f(b2)(v1.value0.value0.value);
                                if ($141.value1 instanceof Data_Maybe.Nothing) {
                                    return Data_Machine_Mealy.stepMealy(dictMonad)(v1.value0.value0.state)(loop(v1.value1)($141.value0));
                                };
                                if ($141.value1 instanceof Data_Maybe.Just) {
                                    var c$prime = new GenOut({
                                        value: $141.value1.value0, 
                                        state: v1.value0.value0.state
                                    });
                                    return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Machine_Mealy.Emit(c$prime, loop(v1.value1)($141.value0)));
                                };
                                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 366, column 7 - line 370, column 46: " + [ $141.constructor.name ]);
                            };
                            throw new Error("Failed pattern match at Test.StrongCheck.Gen line 364, column 5 - line 364, column 35: " + [ v1.constructor.name ]);
                        };
                        return Data_Machine_Mealy.mealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (st) {
                            return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Machine_Mealy.stepMealy(dictMonad)(st)(m1))(g);
                        });
                    };
                };
                return Data_Function.apply(GenT.create)(loop(v.value0)(b));
            };
        };
    };
};
var toLazyList = function (v) {
    return function (s) {
        var loop = function (m1) {
            return function (s2) {
                var $155 = Control_Monad_Trampoline.runTrampoline(Data_Machine_Mealy.stepMealy(Control_Monad_Free.freeMonad)(s2)(m1));
                if ($155 instanceof Data_Machine_Mealy.Halt) {
                    return Control_Monad_List_Trans.nil(Data_Lazy.applicativeLazy);
                };
                if ($155 instanceof Data_Machine_Mealy.Emit) {
                    return Control_Monad_List_Trans["prepend'"](Data_Lazy.applicativeLazy)($155.value0.value0.value)(Data_Lazy.defer(function (v1) {
                        return loop($155.value1)($155.value0.value0.state);
                    }));
                };
                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 551, column 5 - line 554, column 48: " + [ $155.constructor.name ]);
            };
        };
        return Data_Function.apply(Control_Monad_List_Trans.wrapLazy(Data_Lazy.applicativeLazy))(Data_Lazy.defer(function (v1) {
            return loop(v.value0)(s);
        }));
    };
};
var stateful = function (dictMonad) {
    return function (f) {
        return Data_Function.apply(GenT.create)(Control_Bind.bindFlipped(Data_Machine_Mealy.bindMealy(dictMonad))(function ($293) {
            return unGen(f($293));
        })(Data_Machine_Mealy.take(dictMonad)(1)(Control_Category.id(Data_Machine_Mealy.categoryMealy(dictMonad)))));
    };
};
var stateM = function (f) {
    return function ($294) {
        return GenState.create(f(unGenState($294)));
    };
};
var variant = function (dictMonad) {
    return function (n) {
        return function (g) {
            return Data_Function.apply(GenT.create)(Data_Profunctor.lmap(Data_Machine_Mealy.profunctorMealy(dictMonad))(stateM(function (s) {
                var $164 = {};
                for (var $165 in s) {
                    if (s.hasOwnProperty($165)) {
                        $164[$165] = s[$165];
                    };
                };
                $164.seed = n;
                return $164;
            }))(unGen(g)));
        };
    };
};
var sized = function (dictMonad) {
    return function (f) {
        return stateful(dictMonad)(function (s) {
            return f((unGenState(s)).size);
        });
    };
};
var semigroupGenT = function (dictMonad) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return new GenT(Data_Semigroup.append(Data_Machine_Mealy.semigroupMealy(dictMonad))(v.value0)(v1.value0));
        };
    });
};
var resize = function (dictMonad) {
    return function (sz) {
        return function (g) {
            return Data_Function.apply(GenT.create)(Data_Profunctor.lmap(Data_Machine_Mealy.profunctorMealy(dictMonad))(stateM(function (s) {
                var $171 = {};
                for (var $172 in s) {
                    if (s.hasOwnProperty($172)) {
                        $171[$172] = s[$172];
                    };
                };
                $171.size = sz;
                return $171;
            }))(unGen(g)));
        };
    };
};
var pureGen = function (dictMonad) {
    return function (f) {
        return Data_Function.apply(GenT.create)(Data_Profunctor.arr(Data_Machine_Mealy.categoryMealy(dictMonad))(Data_Machine_Mealy.profunctorMealy(dictMonad))(f));
    };
};
var monoidGenT = function (dictMonad) {
    return new Data_Monoid.Monoid(function () {
        return semigroupGenT(dictMonad);
    }, new GenT(Data_Monoid.mempty(Data_Machine_Mealy.monoidMealy(dictMonad))));
};
var liftMealy = function (dictMonad) {
    return function (f) {
        return function (g) {
            return Data_Function.apply(GenT.create)(f(unGen(g)));
        };
    };
};
var takeGen = function (dictMonad) {
    return function (n) {
        return Data_Function.apply(liftMealy(dictMonad))(Data_Machine_Mealy.take(dictMonad)(n));
    };
};
var lcgN = Data_Function.apply(Data_Int.toNumber)(1 << 30);
var lcgM = 1.103515245e9;
var lcgC = 12345.0;
var lcgNext = function (n) {
    return $$Math.remainder(lcgM * n + lcgC)(lcgN);
};
var perturbNum = function (n) {
    return Data_Function.apply(Data_Semiring.add(Data_Semiring.semiringNumber))(lcgNext(Data_Int.toNumber($foreign.float32ToInt32(n))));
};
var perturbGen = function (dictMonad) {
    return function (n) {
        return function (v) {
            return Data_Function.apply(GenT.create)(Data_Profunctor.lmap(Data_Machine_Mealy.profunctorMealy(dictMonad))(stateM(function (s) {
                var $176 = {};
                for (var $177 in s) {
                    if (s.hasOwnProperty($177)) {
                        $176[$177] = s[$177];
                    };
                };
                $176.seed = perturbNum(n)(s.seed);
                return $176;
            }))(v.value0));
        };
    };
};
var semigroupGenState = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return new GenState({
            seed: perturbNum(v.value0.seed)(v1.value0.seed), 
            size: v1.value0.size
        });
    };
});
var monoidGenState = new Data_Monoid.Monoid(function () {
    return semigroupGenState;
}, new GenState({
    seed: 0.0, 
    size: 10
}));
var semigroupGenOut = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return new GenOut({
                state: Data_Semigroup.append(semigroupGenState)(v.value0.state)(v1.value0.state), 
                value: Data_Semigroup.append(dictSemigroup)(v.value0.value)(v1.value0.value)
            });
        };
    });
};
var monoidGenOut = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupGenOut(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
    }, new GenOut({
        state: Data_Monoid.mempty(monoidGenState), 
        value: Data_Monoid.mempty(dictMonoid)
    }));
};
var updateSeedState = function (v) {
    return new GenState({
        seed: lcgNext(v.value0.seed), 
        size: v.value0.size
    });
};
var lcgStep = function (dictMonad) {
    return Data_Function.apply(GenT.create)(Data_Profunctor.arr(Data_Machine_Mealy.categoryMealy(dictMonad))(Data_Machine_Mealy.profunctorMealy(dictMonad))(function (s) {
        return new GenOut({
            state: updateSeedState(s), 
            value: (unGenState(s)).seed
        });
    }));
};
var updateSeedGen = function (dictMonad) {
    return function (v) {
        return Data_Function.apply(GenT.create)(Data_Profunctor.lmap(Data_Machine_Mealy.profunctorMealy(dictMonad))(updateSeedState)(v.value0));
    };
};
var lazyGenT = function (dictMonad) {
    return new Control_Lazy.Lazy(function (f) {
        return Data_Function.apply(GenT.create)(Control_Lazy.defer(Data_Machine_Mealy.lazyMealy(dictMonad))(function ($295) {
            return unGen(f($295));
        }));
    });
};
var interleave = function (dictMonad) {
    return function (v) {
        return function (v1) {
            return Data_Function.apply(GenT.create)(Data_Machine_Mealy.interleave(dictMonad)(v.value0)(v1.value0));
        };
    };
};
var infinite = function (dictMonad) {
    return Data_Function.apply(liftMealy(dictMonad))(Data_Machine_Mealy.loop(dictMonad));
};
var functorGenOut = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new GenOut({
            state: v.value0.state, 
            value: f(v.value0.value)
        });
    };
});
var functorGenT = function (dictMonad) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Data_Function.apply(GenT.create)(Data_Functor.map(Data_Machine_Mealy.functorMealy(dictMonad))(Data_Functor.map(functorGenOut)(f))(v.value0));
        };
    });
};
var uniform = function (dictMonad) {
    return Data_Functor.map(functorGenT(dictMonad))(function (v) {
        return v / Data_Int.toNumber(1 << 30);
    })(lcgStep(dictMonad));
};
var stepGen = function (dictMonad) {
    return function (st) {
        return function (v) {
            var h = function (v1) {
                if (v1 instanceof Data_Machine_Mealy.Halt) {
                    return Data_Maybe.Nothing.value;
                };
                if (v1 instanceof Data_Machine_Mealy.Emit) {
                    return Data_Function.apply(Data_Maybe.Just.create)(Data_Functor.map(functorGenOut)(Data_Function.flip(Data_Tuple.Tuple.create)(new GenT(v1.value1)))(v1.value0));
                };
                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 143, column 3 - line 143, column 25: " + [ v1.constructor.name ]);
            };
            return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(h)(Data_Machine_Mealy.stepMealy(dictMonad)(st)(v.value0));
        };
    };
};
var foldGen$prime = function (dictMonad) {
    return function (f) {
        return function (b) {
            return function (s) {
                return function (v) {
                    var loop = function (st) {
                        return function (m1) {
                            return function (b2) {
                                var g = function (v1) {
                                    if (v1 instanceof Data_Machine_Mealy.Halt) {
                                        return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Tuple.Tuple(b2, new GenT(Data_Machine_Mealy.halt(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))));
                                    };
                                    if (v1 instanceof Data_Machine_Mealy.Emit) {
                                        var b$prime = f(b2)(v1.value0.value0.value);
                                        return Data_Maybe.maybe(Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Tuple.Tuple(b2, new GenT(v1.value1))))(loop(v1.value0.value0.state)(v1.value1))(b$prime);
                                    };
                                    throw new Error("Failed pattern match at Test.StrongCheck.Gen line 334, column 5 - line 334, column 52: " + [ v1.constructor.name ]);
                                };
                                return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Machine_Mealy.stepMealy(dictMonad)(st)(m1))(g);
                            };
                        };
                    };
                    return loop(s)(v.value0)(b);
                };
            };
        };
    };
};
var foldGen = function (dictMonad) {
    return function (f) {
        return function (b) {
            return function (s) {
                return function (g) {
                    return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Tuple.fst)(foldGen$prime(dictMonad)(f)(b)(s)(g));
                };
            };
        };
    };
};
var extend = function (dictMonad) {
    return function (n) {
        return function (v) {
            var loop = function (i) {
                return function (m1) {
                    return Data_Machine_Mealy.mealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (st) {
                        var f = function (v1) {
                            if (v1 instanceof Data_Machine_Mealy.Emit) {
                                return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Machine_Mealy.Emit(v1.value0, loop(i + 1 | 0)(v1.value1)));
                            };
                            if (v1 instanceof Data_Machine_Mealy.Halt) {
                                var $224 = i >= n;
                                if ($224) {
                                    return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Machine_Mealy.Halt.value);
                                };
                                if (!$224) {
                                    return Data_Machine_Mealy.stepMealy(dictMonad)(st)(loop(i)(v.value0));
                                };
                                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 308, column 9 - line 308, column 75: " + [ $224.constructor.name ]);
                            };
                            throw new Error("Failed pattern match at Test.StrongCheck.Gen line 306, column 7 - line 306, column 64: " + [ v1.constructor.name ]);
                        };
                        return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Machine_Mealy.stepMealy(dictMonad)(st)(m1))(f);
                    });
                };
            };
            return Data_Semigroup.append(semigroupGenT(dictMonad))(Data_Function.apply(GenT.create)(loop(0)(v.value0)))(new GenT(v.value0));
        };
    };
};
var runGen = function (dictMonad) {
    return function (n) {
        return function (st) {
            return function (g) {
                var f = function (v) {
                    return function (a) {
                        var $226 = Data_Array.length(v) < n;
                        if ($226) {
                            return Data_Function.apply(Data_Maybe.Just.create)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ a ]));
                        };
                        if (!$226) {
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match at Test.StrongCheck.Gen line 503, column 11 - line 503, column 62: " + [ $226.constructor.name ]);
                    };
                };
                return foldGen$prime(dictMonad)(f)([  ])(st)(extend(dictMonad)(n)(g));
            };
        };
    };
};
var sample$prime = function (dictMonad) {
    return function (n) {
        return function (st) {
            return function (g) {
                return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Tuple.fst)(runGen(dictMonad)(n)(st)(g));
            };
        };
    };
};
var sample = function (dictMonad) {
    return function (n) {
        return sample$prime(dictMonad)(n)(new GenState({
            size: 10, 
            seed: 4.545645874e9
        }));
    };
};
var showSample$prime = function (dictShow) {
    return function (n) {
        return function (g) {
            return Data_Function.apply(Control_Monad_Eff_Console.logShow(Data_Show.showArray(dictShow)))(Data_Function.apply(Control_Monad_Trampoline.runTrampoline)(sample(Control_Monad_Free.freeMonad)(n)(g)));
        };
    };
};
var showSample = function (dictShow) {
    return showSample$prime(dictShow)(10);
};
var vectorOf = function (dictMonad) {
    return function (n) {
        return function (g) {
            var f = function (b) {
                return function (a) {
                    var b$prime = Data_Semigroup.append(Data_Semigroup.semigroupArray)(b)([ a ]);
                    var $227 = Data_Array.length(b$prime) >= n;
                    if ($227) {
                        return new Data_Tuple.Tuple([  ], new Data_Maybe.Just(b$prime));
                    };
                    if (!$227) {
                        return new Data_Tuple.Tuple(b$prime, Data_Maybe.Nothing.value);
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck.Gen line 257, column 8 - line 257, column 73: " + [ $227.constructor.name ]);
                };
            };
            return transGen(dictMonad)(f)([  ])(extend(dictMonad)(n)(g));
        };
    };
};
var evalGen = function (dictMonad) {
    return function (g) {
        return function (st) {
            var h = function (v) {
                if (v instanceof Data_Maybe.Nothing) {
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just(v.value0.value0.value.value0);
                };
                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 149, column 3 - line 149, column 22: " + [ v.constructor.name ]);
            };
            return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(h)(stepGen(dictMonad)(st)(g));
        };
    };
};
var repeatable$prime = function (dictMonad) {
    return Partial_Unsafe.unsafePartial(function (dictPartial) {
        return function (f) {
            return Data_Function.apply(GenT.create)(Data_Machine_Mealy.pureMealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (s) {
                return new Data_Machine_Mealy.Emit(new GenOut({
                    state: s, 
                    value: function (a) {
                        return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Maybe.fromJust(dictPartial))(evalGen(dictMonad)(f(a))(s));
                    }
                }), Data_Machine_Mealy.halt(dictMonad["__superclass_Control.Applicative.Applicative_0"]()));
            }));
        };
    });
};
var repeatable = function (f) {
    var g = function (f$prime) {
        return function (a) {
            return Data_Function.apply(Control_Monad_Trampoline.runTrampoline)(f$prime(a));
        };
    };
    return Data_Functor.map(functorGenT(Control_Monad_Free.freeMonad))(g)(repeatable$prime(Control_Monad_Free.freeMonad)(f));
};
var dropGen = function (dictMonad) {
    return function (n) {
        return Data_Function.apply(liftMealy(dictMonad))(Data_Machine_Mealy.drop(dictMonad)(n));
    };
};
var collectAll = function (dictMonad) {
    var f = function (v) {
        return function (a) {
            return Data_Function.apply(Data_Maybe.Just.create)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ a ]));
        };
    };
    return foldGen(dictMonad)(f)([  ]);
};
var chunked = function (dictMonad) {
    return function (n) {
        return function (g) {
            var f = function (xs) {
                return function (a) {
                    var xs$prime = Data_Array.cons(a)(xs);
                    var $234 = Data_Array.length(xs$prime) >= n;
                    if ($234) {
                        return new Data_Tuple.Tuple([  ], new Data_Maybe.Just(xs$prime));
                    };
                    if (!$234) {
                        return new Data_Tuple.Tuple(xs$prime, Data_Maybe.Nothing.value);
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck.Gen line 513, column 8 - line 513, column 76: " + [ $234.constructor.name ]);
                };
            };
            return transGen(dictMonad)(f)([  ])(extend(dictMonad)(n)(g));
        };
    };
};
var chooseInt = function (dictMonad) {
    return function (a) {
        return function (b) {
            var min = $$Math.ceil($$Math.min(a)(b));
            var max = $$Math.floor($$Math.max(a)(b));
            var numRes = Data_Functor.map(functorGenT(dictMonad))(function ($296) {
                return (min - 0.5) + ((max - min) + 1.0) * $296;
            })(uniform(dictMonad));
            var rounded = Data_Functor.map(functorGenT(dictMonad))($$Math.round)(numRes);
            var intRes = Data_Functor.map(functorGenT(dictMonad))(Data_Int.fromNumber)(rounded);
            return Data_Functor.map(functorGenT(dictMonad))(Data_Maybe.fromMaybe(0))(intRes);
        };
    };
};
var choose = function (dictMonad) {
    return function (a) {
        return function (b) {
            var min = $$Math.min(a)(b);
            var max = $$Math.max(a)(b);
            return Data_Functor.map(functorGenT(dictMonad))(function ($297) {
                return min + (max - min) * $297;
            })(uniform(dictMonad));
        };
    };
};
var charGen = function (dictMonad) {
    return Data_Functor.map(functorGenT(dictMonad))(Data_Char.fromCharCode)(chooseInt(dictMonad)(0.0)(65535.0));
};
var applyGenOut = new Control_Apply.Apply(function () {
    return functorGenOut;
}, function (v) {
    return function (v1) {
        return new GenOut({
            state: v1.value0.state, 
            value: v.value0.value(v1.value0.value)
        });
    };
});
var applyGenT = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorGenT(dictMonad);
    }, function (f) {
        return function (x) {
            return new GenT(Control_Bind.bind(Data_Machine_Mealy.bindMealy(dictMonad))(unGen(f))(function (v) {
                return Control_Bind.bind(Data_Machine_Mealy.bindMealy(dictMonad))(Data_Function.apply(unGen)(updateSeedGen(dictMonad)(x)))(function (v1) {
                    return Data_Function.apply(Control_Applicative.pure(Data_Machine_Mealy.applicativeMealy(dictMonad)))(Control_Apply.apply(applyGenOut)(v)(v1));
                });
            }));
        };
    });
};
var bindGenT = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyGenT(dictMonad);
    }, function (v) {
        return function (f) {
            return new GenT(Control_Bind.bind(Data_Machine_Mealy.bindMealy(dictMonad))(v.value0)(function (v1) {
                return Data_Function.apply(unGen)(updateSeedGen(dictMonad)(f((unGenOut(v1)).value)));
            }));
        };
    });
};
var arrayOf = function (dictMonad) {
    return function (g) {
        return sized(dictMonad)(function (n) {
            return Control_Bind.bind(bindGenT(dictMonad))(chooseInt(dictMonad)(0.0)(Data_Int.toNumber(n)))(function (v) {
                return vectorOf(dictMonad)(v)(g);
            });
        });
    };
};
var frequency = function (dictMonad) {
    return function (x) {
        return function (xs) {
            var xxs = new Data_List.Cons(x, xs);
            var total = Data_Function.apply(Data_Monoid_Additive.runAdditive)(Data_Foldable.fold(Data_List.foldableList)(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber))(Data_Functor.map(Data_List.functorList)(function ($298) {
                return Data_Monoid_Additive.Additive(Data_Tuple.fst($298));
            })(xxs)));
            var pick = function (__copy_v) {
                return function (__copy_d) {
                    return function (__copy_v1) {
                        var v = __copy_v;
                        var d = __copy_d;
                        var v1 = __copy_v1;
                        tco: while (true) {
                            if (v1 instanceof Data_List.Nil) {
                                return d;
                            };
                            if (v1 instanceof Data_List.Cons) {
                                var $249 = v <= v1.value0.value0;
                                if ($249) {
                                    return v1.value0.value1;
                                };
                                if (!$249) {
                                    var __tco_v = v - v1.value0.value0;
                                    var __tco_d = d;
                                    var __tco_v1 = v1.value1;
                                    v = __tco_v;
                                    d = __tco_d;
                                    v1 = __tco_v1;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 232, column 42 - line 232, column 81: " + [ $249.constructor.name ]);
                            };
                            throw new Error("Failed pattern match at Test.StrongCheck.Gen line 231, column 7 - line 231, column 25: " + [ v.constructor.name, d.constructor.name, v1.constructor.name ]);
                        };
                    };
                };
            };
            return Control_Bind.bind(bindGenT(dictMonad))(chooseInt(dictMonad)(1.0)(total))(function (v) {
                return pick(Data_Int.toNumber(v))(Data_Tuple.snd(x))(xxs);
            });
        };
    };
};
var oneOf = function (dictMonad) {
    return function (x) {
        return function (xs) {
            return Control_Bind.bind(bindGenT(dictMonad))(chooseInt(dictMonad)(0.0)(Data_Int.toNumber(Data_Array.length(xs))))(function (v) {
                var $256 = v === 0;
                if ($256) {
                    return x;
                };
                if (!$256) {
                    return Data_Maybe.fromMaybe(x)(Data_Array.index(xs)(v - 1));
                };
                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 214, column 3 - line 214, column 54: " + [ $256.constructor.name ]);
            });
        };
    };
};
var applyGen = function (dictMonad) {
    return function (s) {
        return function (v) {
            var f = function (v1) {
                if (v1 instanceof Data_Machine_Mealy.Halt) {
                    return Data_Maybe.Nothing.value;
                };
                if (v1 instanceof Data_Machine_Mealy.Emit) {
                    return Data_Function.apply(Data_Maybe.Just.create)(new GenOut({
                        state: v1.value0.value0.state, 
                        value: new Data_Tuple.Tuple(v1.value0.value0.value, new GenT(v1.value1))
                    }));
                };
                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 466, column 3 - line 466, column 25: " + [ v1.constructor.name ]);
            };
            return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(f)(Data_Machine_Mealy.stepMealy(dictMonad)(s)(v.value0));
        };
    };
};
var applicativeGenT = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyGenT(dictMonad);
    }, function (t) {
        return Data_Function.apply(GenT.create)(Data_Profunctor.arr(Data_Machine_Mealy.categoryMealy(dictMonad))(Data_Machine_Mealy.profunctorMealy(dictMonad))(function (s) {
            return new GenOut({
                state: updateSeedState(s), 
                value: t
            });
        }));
    });
};
var arrayOf1 = function (dictMonad) {
    return function (g) {
        return sized(dictMonad)(function (n) {
            return Control_Bind.bind(bindGenT(dictMonad))(chooseInt(dictMonad)(0.0)(Data_Int.toNumber(n)))(function (v) {
                return Control_Bind.bind(bindGenT(dictMonad))(g)(function (v1) {
                    return Control_Bind.bind(bindGenT(dictMonad))(vectorOf(dictMonad)(v - 1)(g))(function (v2) {
                        return Data_Function.apply(Control_Applicative.pure(applicativeGenT(dictMonad)))(new Data_Tuple.Tuple(v1, v2));
                    });
                });
            });
        });
    };
};
var elements = function (dictMonad) {
    return function (x) {
        return function (xs) {
            return Control_Bind.bind(bindGenT(dictMonad))(chooseInt(dictMonad)(0.0)(Data_Int.toNumber(Data_List.length(xs))))(function (v) {
                return Control_Applicative.pure(applicativeGenT(dictMonad))((function () {
                    var $270 = v === 0;
                    if ($270) {
                        return x;
                    };
                    if (!$270) {
                        return Data_Maybe.fromMaybe(x)(Data_List.index(xs)(v - 1));
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck.Gen line 263, column 3 - line 263, column 59: " + [ $270.constructor.name ]);
                })());
            });
        };
    };
};
var monadGenT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeGenT(dictMonad);
    }, function () {
        return bindGenT(dictMonad);
    });
};
var nChooseK = function (dictMonad) {
    return Partial_Unsafe.unsafePartial(function (dictPartial) {
        return function (k) {
            return function (arr) {
                var $271 = k === 0;
                if ($271) {
                    return Control_Applicative.pure(applicativeGenT(dictMonad))([  ]);
                };
                if (!$271) {
                    var $272 = Data_Array.length(arr) === 0;
                    if ($272) {
                        return Data_Monoid.mempty(monoidGenT(dictMonad));
                    };
                    if (!$272) {
                        var tl = Data_Array.drop(1)(arr);
                        var hd = Data_Function.apply(Data_Array.singleton)(Data_Array_Partial.unsafeIndex(dictPartial)(arr)(0));
                        return Data_Semigroup.append(semigroupGenT(dictMonad))(Data_Functor.map(functorGenT(dictMonad))(function (v) {
                            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(hd)(v);
                        })(nChooseK(dictMonad)(k - 1)(tl)))(nChooseK(dictMonad)(k)(tl));
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck.Gen line 392, column 8 - line 397, column 67: " + [ $272.constructor.name ]);
                };
                throw new Error("Failed pattern match at Test.StrongCheck.Gen line 391, column 3 - line 397, column 67: " + [ $271.constructor.name ]);
            };
        };
    });
};
var nChooseKL = function (dictMonad) {
    return function (v) {
        return function (v1) {
            if (v === 0) {
                return Control_Applicative.pure(applicativeGenT(dictMonad))(Data_List.Nil.value);
            };
            if (v1 instanceof Data_List.Nil) {
                return Data_Monoid.mempty(monoidGenT(dictMonad));
            };
            if (v1 instanceof Data_List.Cons) {
                return Data_Semigroup.append(semigroupGenT(dictMonad))(Data_Functor.map(functorGenT(dictMonad))(function (v2) {
                    return Data_Semigroup.append(Data_List.semigroupList)(Data_List.singleton(v1.value0))(v2);
                })(nChooseKL(dictMonad)(v - 1)(v1.value1)))(nChooseKL(dictMonad)(v)(v1.value1));
            };
            throw new Error("Failed pattern match at Test.StrongCheck.Gen line 401, column 1 - line 401, column 27: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var shuffleArray = function (dictMonad) {
    var shuffle0 = function (acc) {
        return function (v) {
            if (v.length === 0) {
                return Data_Function.apply(Control_Applicative.pure(applicativeGenT(dictMonad)))(acc);
            };
            return Control_Bind.bind(bindGenT(dictMonad))(chooseInt(dictMonad)(0.0)(Data_Int.toNumber(Data_Array.length(v) - 1)))(function (v1) {
                var xs$prime = Data_Function.apply(Data_Maybe.fromMaybe(v))(Data_Array.deleteAt(v1)(v));
                var acc$prime = Data_Semigroup.append(Data_Semigroup.semigroupArray)(acc)(Data_Maybe.maybe([  ])(Data_Array.singleton)(Data_Array.index(v)(v1)));
                return shuffle0(acc$prime)(xs$prime);
            });
        };
    };
    return shuffle0([  ]);
};
var suchThatMaybe = function (dictMonad) {
    return function (g) {
        return function (p) {
            var $$try = function (v) {
                return function (v1) {
                    if (v1 === 0) {
                        return Control_Applicative.pure(applicativeGenT(dictMonad))(Data_Maybe.Nothing.value);
                    };
                    return Control_Bind.bind(bindGenT(dictMonad))(resize(dictMonad)((2 * v | 0) + v1 | 0)(g))(function (v2) {
                        var $283 = p(v2);
                        if ($283) {
                            return Control_Applicative.pure(applicativeGenT(dictMonad))(new Data_Maybe.Just(v2));
                        };
                        if (!$283) {
                            return $$try(v + 1 | 0)(v1 - 1);
                        };
                        throw new Error("Failed pattern match at Test.StrongCheck.Gen line 426, column 5 - line 426, column 55: " + [ $283.constructor.name ]);
                    });
                };
            };
            return Data_Function.apply(sized(dictMonad))($$try(0));
        };
    };
};
var suchThat = function (dictMonad) {
    return function (g) {
        return function (p) {
            var next = function (n) {
                return resize(dictMonad)(n + 1 | 0)(suchThat(dictMonad)(g)(p));
            };
            return Control_Bind.bind(bindGenT(dictMonad))(suchThatMaybe(dictMonad)(g)(p))(Data_Maybe.maybe(sized(dictMonad)(next))(Control_Applicative.pure(applicativeGenT(dictMonad))));
        };
    };
};
var altGenT = function (dictMonad) {
    return new Control_Alt.Alt(function () {
        return functorGenT(dictMonad);
    }, function (v) {
        return function (v1) {
            return Data_Function.apply(GenT.create)(Control_Alt.alt(Data_Machine_Mealy.altMealy(dictMonad))(v.value0)(v1.value0));
        };
    });
};
var plusGenT = function (dictMonad) {
    return new Control_Plus.Plus(function () {
        return altGenT(dictMonad);
    }, Data_Monoid.mempty(monoidGenT(dictMonad)));
};
var alternativeGenT = function (dictMonad) {
    return new Control_Alternative.Alternative(function () {
        return applicativeGenT(dictMonad);
    }, function () {
        return plusGenT(dictMonad);
    });
};
var monadZeroGenT = function (dictMonad) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeGenT(dictMonad);
    }, function () {
        return monadGenT(dictMonad);
    });
};
var monadPlusGenT = function (dictMonad) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroGenT(dictMonad);
    });
};
var allInRange = function (dictMonad) {
    return function (min) {
        return function (max) {
            var go = function (cur) {
                return Data_Machine_Mealy.pureMealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (s) {
                    var $288 = cur > max;
                    if ($288) {
                        return Data_Machine_Mealy.Halt.value;
                    };
                    if (!$288) {
                        return new Data_Machine_Mealy.Emit(new GenOut({
                            state: s, 
                            value: cur
                        }), go(cur + 1 | 0));
                    };
                    throw new Error("Failed pattern match at Test.StrongCheck.Gen line 434, column 5 - line 436, column 65: " + [ $288.constructor.name ]);
                });
            };
            return Data_Function.apply(GenT.create)(go(min));
        };
    };
};
var allInArray = function (dictMonad) {
    return function (a) {
        var go = function (i) {
            return Data_Machine_Mealy.pureMealy(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(function (s) {
                return Data_Maybe.maybe(Data_Machine_Mealy.Halt.value)(function (a1) {
                    return new Data_Machine_Mealy.Emit(new GenOut({
                        state: s, 
                        value: a1
                    }), go(i + 1 | 0));
                })(Data_Array.index(a)(i));
            });
        };
        return Data_Function.apply(GenT.create)(go(0));
    };
};
var perms = function (dictMonad) {
    return Partial_Unsafe.unsafePartial(function (dictPartial) {
        return function (arr) {
            var $289 = Data_Array.length(arr) === 0;
            if ($289) {
                return Control_Applicative.pure(applicativeGenT(dictMonad))([  ]);
            };
            if (!$289) {
                var tl = Data_Array_Partial.tail(dictPartial)(arr);
                var hd = Data_Array_Partial.head(dictPartial)(arr);
                return Control_Bind.bind(bindGenT(dictMonad))(perms(dictMonad)(tl))(function (v) {
                    var f = function (n) {
                        var suffix = Data_Array.drop(n)(v);
                        var prefix = Data_Array.take(n)(v);
                        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(prefix)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ hd ])(suffix));
                    };
                    return Data_Function.apply(allInArray(dictMonad))(Data_Functor.map(Data_Functor.functorArray)(f)(Data_Array.range(0)(Data_Array.length(v))));
                });
            };
            throw new Error("Failed pattern match at Test.StrongCheck.Gen line 376, column 3 - line 385, column 47: " + [ $289.constructor.name ]);
        };
    });
};
var shuffle$prime = function (dictMonad) {
    return function (n) {
        return function (g) {
            return Control_Bind.bind(bindGenT(dictMonad))(chunked(dictMonad)(n)(g))(function (v) {
                return Control_Bind.bind(bindGenT(dictMonad))(shuffleArray(dictMonad)(v))(function (v1) {
                    return allInArray(dictMonad)(v1);
                });
            });
        };
    };
};
var shuffle = function (dictMonad) {
    return shuffle$prime(dictMonad)(100);
};
module.exports = {
    GenOut: GenOut, 
    GenState: GenState, 
    GenT: GenT, 
    allInArray: allInArray, 
    allInRange: allInRange, 
    applyGen: applyGen, 
    arrayOf: arrayOf, 
    arrayOf1: arrayOf1, 
    charGen: charGen, 
    choose: choose, 
    chooseInt: chooseInt, 
    chunked: chunked, 
    collectAll: collectAll, 
    dropGen: dropGen, 
    elements: elements, 
    extend: extend, 
    foldGen: foldGen, 
    "foldGen'": foldGen$prime, 
    frequency: frequency, 
    infinite: infinite, 
    interleave: interleave, 
    nChooseK: nChooseK, 
    oneOf: oneOf, 
    perms: perms, 
    perturbGen: perturbGen, 
    repeatable: repeatable, 
    resize: resize, 
    runGen: runGen, 
    sample: sample, 
    "sample'": sample$prime, 
    showSample: showSample, 
    "showSample'": showSample$prime, 
    shuffle: shuffle, 
    "shuffle'": shuffle$prime, 
    shuffleArray: shuffleArray, 
    sized: sized, 
    stateful: stateful, 
    suchThat: suchThat, 
    suchThatMaybe: suchThatMaybe, 
    takeGen: takeGen, 
    toLazyList: toLazyList, 
    transGen: transGen, 
    unGen: unGen, 
    unGenOut: unGenOut, 
    unGenState: unGenState, 
    uniform: uniform, 
    updateSeedState: updateSeedState, 
    variant: variant, 
    vectorOf: vectorOf, 
    wrapEffect: wrapEffect, 
    semigroupGenState: semigroupGenState, 
    monoidGenState: monoidGenState, 
    semigroupGenOut: semigroupGenOut, 
    monoidGenOut: monoidGenOut, 
    functorGenOut: functorGenOut, 
    applyGenOut: applyGenOut, 
    functorGenT: functorGenT, 
    applyGenT: applyGenT, 
    applicativeGenT: applicativeGenT, 
    semigroupGenT: semigroupGenT, 
    monoidGenT: monoidGenT, 
    bindGenT: bindGenT, 
    monadGenT: monadGenT, 
    altGenT: altGenT, 
    plusGenT: plusGenT, 
    alternativeGenT: alternativeGenT, 
    monadZeroGenT: monadZeroGenT, 
    monadPlusGenT: monadPlusGenT, 
    lazyGenT: lazyGenT
};
