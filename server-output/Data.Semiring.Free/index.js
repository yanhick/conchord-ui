// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Data_List = require("../Data.List");
var Data_Foldable = require("../Data.Foldable");
var Data_Traversable = require("../Data.Traversable");
var Data_Show = require("../Data.Show");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Eq = require("../Data.Eq");
var Data_Ord = require("../Data.Ord");
var Data_Semiring = require("../Data.Semiring");
var Control_Bind = require("../Control.Bind");
var Control_Applicative = require("../Control.Applicative");
var Data_Functor = require("../Data.Functor");
var Data_Function = require("../Data.Function");
var Control_Apply = require("../Control.Apply");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Free = function (x) {
    return x;
};
var showFree = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Free " + (Data_Show.show(Data_List.showList(Data_List.showList(dictShow)))(v) + ")");
    });
};
var semiringFree = new Data_Semiring.Semiring(function (v) {
    return function (v1) {
        return Data_Semigroup.append(Data_List.semigroupList)(v)(v1);
    };
}, function (v) {
    return function (v1) {
        return Control_Bind.bind(Data_List.bindList)(v)(function (v2) {
            return Control_Bind.bind(Data_List.bindList)(v1)(function (v3) {
                return Control_Applicative.pure(Data_List.applicativeList)(Data_Semigroup.append(Data_List.semigroupList)(v2)(v3));
            });
        });
    };
}, Data_List.singleton(Data_List.Nil.value), Data_List.Nil.value);
var runFree = function (v) {
    return v;
};
var liftFree = function (dictSemiring) {
    return function (f) {
        return function (v) {
            return Data_Foldable.sum(Data_List.foldableList)(dictSemiring)(Data_Functor.map(Data_List.functorList)(function ($59) {
                return Data_Foldable.product(Data_List.foldableList)(dictSemiring)(Data_Functor.map(Data_List.functorList)(f)($59));
            })(v));
        };
    };
};
var functorFree = new Data_Functor.Functor(function (fn) {
    return function (v) {
        return Data_Function.apply(Free)(Data_Functor.map(Data_List.functorList)(Data_Functor.map(Data_List.functorList)(fn))(v));
    };
});
var free = function (a) {
    return Data_List.singleton(Data_List.singleton(a));
};
var lowerFree = function (dictSemiring) {
    return function (f) {
        return function (a) {
            return f(free(a));
        };
    };
};
var foldableFree = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (fn) {
        return function (v) {
            return Data_Function.apply(Data_Foldable.fold(Data_List.foldableList)(dictMonoid))(Data_Foldable.foldMap(Data_List.foldableList)(Data_List.monoidList)(Data_Functor.map(Data_List.functorList)(fn))(v));
        };
    };
}, function (fn) {
    return function (accum) {
        return function (v) {
            return Data_Foldable.foldl(Data_List.foldableList)(Data_Foldable.foldl(Data_List.foldableList)(fn))(accum)(v);
        };
    };
}, function (fn) {
    return function (accum) {
        return function (v) {
            return Data_Foldable.foldr(Data_List.foldableList)(Data_Function.apply(Data_Function.flip)(Data_Foldable.foldr(Data_List.foldableList)(fn)))(accum)(v);
        };
    };
});
var traversableFree = new Data_Traversable.Traversable(function () {
    return foldableFree;
}, function () {
    return functorFree;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Free)(Data_Function.apply(Data_Traversable.sequence(Data_List.traversableList)(dictApplicative))(Data_Functor.map(Data_List.functorList)(Data_Traversable.sequence(Data_List.traversableList)(dictApplicative))(v)));
    };
}, function (dictApplicative) {
    return function (fn) {
        return function (freeA) {
            return Data_Traversable.sequence(traversableFree)(dictApplicative)(Data_Functor.map(functorFree)(fn)(freeA));
        };
    };
});
var eqFree = function (dictEq) {
    return new Data_Eq.Eq(function (v) {
        return function (v1) {
            return Data_Eq.eq(Data_List.eqList(Data_List.eqList(dictEq)))(v)(v1);
        };
    });
};
var ordFree = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqFree(dictOrd["__superclass_Data.Eq.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Data_Ord.compare(Data_List.ordList(Data_List.ordList(dictOrd)))(v)(v1);
        };
    });
};
var applyFree = new Control_Apply.Apply(function () {
    return functorFree;
}, function (v) {
    return function (v1) {
        return Data_Function.apply(Free)(Control_Bind.bind(Data_List.bindList)(v)(function (v2) {
            return Control_Bind.bind(Data_List.bindList)(v1)(function (v3) {
                return Data_Function.apply(Control_Applicative.pure(Data_List.applicativeList))(Control_Apply.apply(Data_List.applyList)(v2)(v3));
            });
        }));
    };
});
var applicativeFree = new Control_Applicative.Applicative(function () {
    return applyFree;
}, free);
module.exports = {
    free: free, 
    liftFree: liftFree, 
    lowerFree: lowerFree, 
    runFree: runFree, 
    showFree: showFree, 
    eqFree: eqFree, 
    ordFree: ordFree, 
    semiringFree: semiringFree, 
    functorFree: functorFree, 
    applyFree: applyFree, 
    applicativeFree: applicativeFree, 
    foldableFree: foldableFree, 
    traversableFree: traversableFree
};
