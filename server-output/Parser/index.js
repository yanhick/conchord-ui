// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Data_Either = require("../Data.Either");
var Data_Foreign_Class = require("../Data.Foreign.Class");
var Data_Foreign = require("../Data.Foreign");
var Data_Generic = require("../Data.Generic");
var Control_Alt = require("../Control.Alt");
var Text_Parsing_StringParser = require("../Text.Parsing.StringParser");
var Text_Parsing_StringParser_String = require("../Text.Parsing.StringParser.String");
var Text_Parsing_StringParser_Combinators = require("../Text.Parsing.StringParser.Combinators");
var Test_StrongCheck_Arbitrary = require("../Test.StrongCheck.Arbitrary");
var Test_StrongCheck_Generic = require("../Test.StrongCheck.Generic");
var Data_Show = require("../Data.Show");
var Data_Semigroup = require("../Data.Semigroup");
var Control_Bind = require("../Control.Bind");
var Data_Function = require("../Data.Function");
var Control_Apply = require("../Control.Apply");
var Data_Unit = require("../Data.Unit");
var Data_Eq = require("../Data.Eq");
var Control_Applicative = require("../Control.Applicative");
var Sharp = (function () {
    function Sharp() {

    };
    Sharp.value = new Sharp();
    return Sharp;
})();
var Flat = (function () {
    function Flat() {

    };
    Flat.value = new Flat();
    return Flat;
})();
var A = (function () {
    function A() {

    };
    A.value = new A();
    return A;
})();
var B = (function () {
    function B() {

    };
    B.value = new B();
    return B;
})();
var C = (function () {
    function C() {

    };
    C.value = new C();
    return C;
})();
var D = (function () {
    function D() {

    };
    D.value = new D();
    return D;
})();
var E = (function () {
    function E() {

    };
    E.value = new E();
    return E;
})();
var F = (function () {
    function F() {

    };
    F.value = new F();
    return F;
})();
var G = (function () {
    function G() {

    };
    G.value = new G();
    return G;
})();
var Major = (function () {
    function Major() {

    };
    Major.value = new Major();
    return Major;
})();
var Minor = (function () {
    function Minor() {

    };
    Minor.value = new Minor();
    return Minor;
})();
var Seventh = (function () {
    function Seventh() {

    };
    Seventh.value = new Seventh();
    return Seventh;
})();
var SongChord = function (x) {
    return x;
};
var showSongChordRootModifier = new Data_Show.Show(function (v) {
    if (v instanceof Sharp) {
        return "#";
    };
    if (v instanceof Flat) {
        return "b";
    };
    throw new Error("Failed pattern match at Parser line 66, column 5 - line 67, column 5: " + [ v.constructor.name ]);
});
var showSongChordRoot = new Data_Show.Show(function (v) {
    if (v instanceof A) {
        return "A";
    };
    if (v instanceof B) {
        return "B";
    };
    if (v instanceof C) {
        return "C";
    };
    if (v instanceof D) {
        return "D";
    };
    if (v instanceof E) {
        return "E";
    };
    if (v instanceof F) {
        return "F";
    };
    if (v instanceof G) {
        return "G";
    };
    throw new Error("Failed pattern match at Parser line 57, column 5 - line 58, column 5: " + [ v.constructor.name ]);
});
var showSongChordInterval = new Data_Show.Show(function (v) {
    return "7";
});
var showChordQuality = new Data_Show.Show(function (v) {
    if (v instanceof Minor) {
        return "m";
    };
    if (v instanceof Major) {
        return "";
    };
    throw new Error("Failed pattern match at Parser line 43, column 5 - line 44, column 5: " + [ v.constructor.name ]);
});
var showSongChord = new Data_Show.Show(function (v) {
    return Data_Show.show(showSongChordRoot)(v.root) + (Data_Maybe.maybe("")(Data_Show.show(showSongChordRootModifier))(v.rootModifier) + (Data_Show.show(showChordQuality)(v.quality) + Data_Maybe.maybe("")(Data_Show.show(showSongChordInterval))(v.interval)));
});
var parseRoot = Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("A"))(A.value))(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("B"))(B.value)))(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("C"))(C.value)))(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("D"))(D.value)))(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("E"))(E.value)))(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("F"))(F.value)))(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("G"))(G.value));
var parseQuality = Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("m"))(Minor.value))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Major.value));
var parseModifier = Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("#"))(Sharp.value))(Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("b"))(Flat.value));
var parseInterval = Data_Functor.voidLeft(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.string("7"))(Seventh.value);
var mkChord = function (r) {
    return function (m) {
        return function (q) {
            return function (i) {
                return {
                    root: r, 
                    rootModifier: m, 
                    quality: q, 
                    interval: i
                };
            };
        };
    };
};
var parseChord = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(parseRoot)(function (v) {
    return Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(mkChord(v))(Text_Parsing_StringParser_Combinators.optionMaybe(parseModifier)))(parseQuality))(Text_Parsing_StringParser_Combinators.optionMaybe(parseInterval));
});
var isForeignSongChord = new Data_Foreign_Class.IsForeign(function (value) {
    return Control_Bind.bind(Data_Either.bindEither)(Data_Foreign.readString(value))(function (v) {
        var $30 = Text_Parsing_StringParser.runParser(parseChord)(v);
        if ($30 instanceof Data_Either.Left) {
            return Data_Function.apply(Data_Either.Left.create)(new Data_Foreign.TypeMismatch(v, "Valid chord"));
        };
        if ($30 instanceof Data_Either.Right) {
            return new Data_Either.Right($30.value0);
        };
        throw new Error("Failed pattern match at Parser line 52, column 9 - line 54, column 29: " + [ $30.constructor.name ]);
    });
});
var genericSongChordRootModifier = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Parser.Sharp" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Sharp.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Parser.Flat" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Flat.value);
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Parser.SongChordRootModifier", [ {
        sigConstructor: "Parser.Sharp", 
        sigValues: [  ]
    }, {
        sigConstructor: "Parser.Flat", 
        sigValues: [  ]
    } ]);
}, function (v) {
    if (v instanceof Sharp) {
        return new Data_Generic.SProd("Parser.Sharp", [  ]);
    };
    if (v instanceof Flat) {
        return new Data_Generic.SProd("Parser.Flat", [  ]);
    };
    throw new Error("Failed pattern match at Parser line 112, column 1 - line 112, column 78: " + [ v.constructor.name ]);
});
var genericSongChordRoot = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Parser.A" && v.value1.length === 0)) {
        return new Data_Maybe.Just(A.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Parser.B" && v.value1.length === 0)) {
        return new Data_Maybe.Just(B.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Parser.C" && v.value1.length === 0)) {
        return new Data_Maybe.Just(C.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Parser.D" && v.value1.length === 0)) {
        return new Data_Maybe.Just(D.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Parser.E" && v.value1.length === 0)) {
        return new Data_Maybe.Just(E.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Parser.F" && v.value1.length === 0)) {
        return new Data_Maybe.Just(F.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Parser.G" && v.value1.length === 0)) {
        return new Data_Maybe.Just(G.value);
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Parser.SongChordRoot", [ {
        sigConstructor: "Parser.A", 
        sigValues: [  ]
    }, {
        sigConstructor: "Parser.B", 
        sigValues: [  ]
    }, {
        sigConstructor: "Parser.C", 
        sigValues: [  ]
    }, {
        sigConstructor: "Parser.D", 
        sigValues: [  ]
    }, {
        sigConstructor: "Parser.E", 
        sigValues: [  ]
    }, {
        sigConstructor: "Parser.F", 
        sigValues: [  ]
    }, {
        sigConstructor: "Parser.G", 
        sigValues: [  ]
    } ]);
}, function (v) {
    if (v instanceof A) {
        return new Data_Generic.SProd("Parser.A", [  ]);
    };
    if (v instanceof B) {
        return new Data_Generic.SProd("Parser.B", [  ]);
    };
    if (v instanceof C) {
        return new Data_Generic.SProd("Parser.C", [  ]);
    };
    if (v instanceof D) {
        return new Data_Generic.SProd("Parser.D", [  ]);
    };
    if (v instanceof E) {
        return new Data_Generic.SProd("Parser.E", [  ]);
    };
    if (v instanceof F) {
        return new Data_Generic.SProd("Parser.F", [  ]);
    };
    if (v instanceof G) {
        return new Data_Generic.SProd("Parser.G", [  ]);
    };
    throw new Error("Failed pattern match at Parser line 110, column 1 - line 110, column 62: " + [ v.constructor.name ]);
});
var genericSongChordQuality = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Parser.Major" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Major.value);
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Parser.Minor" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Minor.value);
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Parser.SongChordQuality", [ {
        sigConstructor: "Parser.Major", 
        sigValues: [  ]
    }, {
        sigConstructor: "Parser.Minor", 
        sigValues: [  ]
    } ]);
}, function (v) {
    if (v instanceof Major) {
        return new Data_Generic.SProd("Parser.Major", [  ]);
    };
    if (v instanceof Minor) {
        return new Data_Generic.SProd("Parser.Minor", [  ]);
    };
    throw new Error("Failed pattern match at Parser line 114, column 1 - line 114, column 68: " + [ v.constructor.name ]);
});
var genericSongChordInterval = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Parser.Seventh" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Seventh.value);
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Parser.SongChordInterval", [ {
        sigConstructor: "Parser.Seventh", 
        sigValues: [  ]
    } ]);
}, function (v) {
    return new Data_Generic.SProd("Parser.Seventh", [  ]);
});
var genericSongChord = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Parser.SongChord" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(SongChord))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 4) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (interval1) {
                    return function (quality1) {
                        return function (root1) {
                            return function (rootModifier1) {
                                return {
                                    interval: interval1, 
                                    quality: quality1, 
                                    root: root1, 
                                    rootModifier: rootModifier1
                                };
                            };
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericMaybe(genericSongChordInterval))((r.value0[0]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericSongChordQuality)((r.value0[1]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericSongChordRoot)((r.value0[2]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericMaybe(genericSongChordRootModifier))((r.value0[3]).recValue(Data_Unit.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Data_Unit.unit)));
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Parser.SongChord", [ {
        sigConstructor: "Parser.SongChord", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "interval", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericMaybe(genericSongChordInterval))(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "quality", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(genericSongChordQuality)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "root", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(genericSongChordRoot)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "rootModifier", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericMaybe(genericSongChordRootModifier))(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    } ]);
}, function (v) {
    return new Data_Generic.SProd("Parser.SongChord", [ function ($dollarq) {
        return new Data_Generic.SRecord([ {
            recLabel: "interval", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(Data_Generic.genericMaybe(genericSongChordInterval))(v.interval);
            }
        }, {
            recLabel: "quality", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(genericSongChordQuality)(v.quality);
            }
        }, {
            recLabel: "root", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(genericSongChordRoot)(v.root);
            }
        }, {
            recLabel: "rootModifier", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(Data_Generic.genericMaybe(genericSongChordRootModifier))(v.rootModifier);
            }
        } ]);
    } ]);
});
var exampleChord = {
    root: A.value, 
    rootModifier: new Data_Maybe.Just(Sharp.value), 
    quality: Minor.value, 
    interval: new Data_Maybe.Just(Seventh.value)
};
var eqSongChord = new Data_Eq.Eq(Data_Generic.gEq(genericSongChord));
var arbitrarySongChord = new Test_StrongCheck_Arbitrary.Arbitrary(Test_StrongCheck_Generic.gArbitrary(genericSongChord));
module.exports = {
    SongChord: SongChord, 
    Seventh: Seventh, 
    Major: Major, 
    Minor: Minor, 
    A: A, 
    B: B, 
    C: C, 
    D: D, 
    E: E, 
    F: F, 
    G: G, 
    Sharp: Sharp, 
    Flat: Flat, 
    exampleChord: exampleChord, 
    mkChord: mkChord, 
    parseChord: parseChord, 
    parseInterval: parseInterval, 
    parseModifier: parseModifier, 
    parseQuality: parseQuality, 
    parseRoot: parseRoot, 
    showSongChord: showSongChord, 
    showChordQuality: showChordQuality, 
    showSongChordInterval: showSongChordInterval, 
    isForeignSongChord: isForeignSongChord, 
    showSongChordRoot: showSongChordRoot, 
    showSongChordRootModifier: showSongChordRootModifier, 
    genericSongChord: genericSongChord, 
    arbitrarySongChord: arbitrarySongChord, 
    eqSongChord: eqSongChord, 
    genericSongChordRoot: genericSongChordRoot, 
    genericSongChordRootModifier: genericSongChordRootModifier, 
    genericSongChordQuality: genericSongChordQuality, 
    genericSongChordInterval: genericSongChordInterval
};
