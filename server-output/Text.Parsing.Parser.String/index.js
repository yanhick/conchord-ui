// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Data_Array = require("../Data.Array");
var Data_Either = require("../Data.Either");
var Data_Foldable = require("../Data.Foldable");
var Data_Maybe = require("../Data.Maybe");
var Data_String = require("../Data.String");
var Text_Parsing_Parser = require("../Text.Parsing.Parser");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators");
var Text_Parsing_Parser_Pos = require("../Text.Parsing.Parser.Pos");
var Data_Function = require("../Data.Function");
var Control_Applicative = require("../Control.Applicative");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Unit = require("../Data.Unit");
var Control_Bind = require("../Control.Bind");
var Data_Eq = require("../Data.Eq");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var string = function (dictMonad) {
    return function (str) {
        return Data_Function.apply(Text_Parsing_Parser.ParserT)(function (v) {
            return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))((function () {
                var $16 = Data_String.indexOf(str)(v.value0.input);
                if ($16 instanceof Data_Maybe.Just && $16.value0 === 0) {
                    return {
                        consumed: true, 
                        input: Data_String.drop(Data_String.length(str))(v.value0.input), 
                        result: new Data_Either.Right(str), 
                        position: Text_Parsing_Parser_Pos.updatePosString(v.value0.position)(str)
                    };
                };
                return Text_Parsing_Parser.parseFailed(v.value0.input)(v.value0.position)("Expected " + str);
            })());
        });
    };
};
var eof = function (dictMonad) {
    return Data_Function.apply(Text_Parsing_Parser.ParserT)(function (v) {
        return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))((function () {
            if (v.value0.input === "") {
                return {
                    consumed: false, 
                    input: v.value0.input, 
                    result: new Data_Either.Right(Data_Unit.unit), 
                    position: v.value0.position
                };
            };
            return Text_Parsing_Parser.parseFailed(v.value0.input)(v.value0.position)("Expected EOF");
        })());
    });
};
var anyChar = function (dictMonad) {
    return Data_Function.apply(Text_Parsing_Parser.ParserT)(function (v) {
        return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))((function () {
            var $27 = Data_String.charAt(0)(v.value0.input);
            if ($27 instanceof Data_Maybe.Nothing) {
                return Text_Parsing_Parser.parseFailed(v.value0.input)(v.value0.position)("Unexpected EOF");
            };
            if ($27 instanceof Data_Maybe.Just) {
                return {
                    consumed: true, 
                    input: Data_String.drop(1)(v.value0.input), 
                    result: new Data_Either.Right($27.value0), 
                    position: Text_Parsing_Parser_Pos.updatePosString(v.value0.position)(Data_String.singleton($27.value0))
                };
            };
            throw new Error("Failed pattern match at Text.Parsing.Parser.String line 33, column 3 - line 35, column 113: " + [ $27.constructor.name ]);
        })());
    });
};
var satisfy = function (dictMonad) {
    return function (f) {
        return Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictMonad))(function (v) {
            var $33 = f(v);
            if ($33) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
            };
            if (!$33) {
                return Data_Function.apply(Text_Parsing_Parser.fail(dictMonad))("Character '" + (Data_String.singleton(v) + "' did not satisfy predicate"));
            };
            throw new Error("Failed pattern match at Text.Parsing.Parser.String line 41, column 3 - line 44, column 1: " + [ $33.constructor.name ]);
        }));
    };
};
var $$char = function (dictMonad) {
    return function (c) {
        return satisfy(dictMonad)(function (v) {
            return v === c;
        });
    };
};
var noneOf = function (dictMonad) {
    return function (ss) {
        return satisfy(dictMonad)(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss));
    };
};
var oneOf = function (dictMonad) {
    return function (ss) {
        return satisfy(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss));
    };
};
var whiteSpace = function (dictMonad) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Function.apply(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT))(satisfy(dictMonad)(function (c) {
        return c === "\n" || (c === "\r" || (c === " " || c === "\t"));
    })))(function (v) {
        return Data_Function.apply(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_String.fromCharArray(v));
    });
};
var skipSpaces = function (dictMonad) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(whiteSpace(dictMonad))(function () {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
    });
};
module.exports = {
    anyChar: anyChar, 
    "char": $$char, 
    eof: eof, 
    noneOf: noneOf, 
    oneOf: oneOf, 
    satisfy: satisfy, 
    skipSpaces: skipSpaces, 
    string: string, 
    whiteSpace: whiteSpace
};
