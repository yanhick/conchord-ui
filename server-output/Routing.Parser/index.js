// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Routing_Types = require("../Routing.Types");
var Data_Array = require("../Data.Array");
var Data_Map = require("../Data.Map");
var Data_String = require("../Data.String");
var Control_MonadPlus = require("../Control.MonadPlus");
var Data_List = require("../Data.List");
var Data_Maybe = require("../Data.Maybe");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Data_Function = require("../Data.Function");
var Data_Foldable = require("../Data.Foldable");
var Control_Bind = require("../Control.Bind");
var Control_MonadZero = require("../Control.MonadZero");
var Data_Ord = require("../Data.Ord");
var Control_Apply = require("../Control.Apply");
var Data_Functor = require("../Data.Functor");
var Data_Eq = require("../Data.Eq");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var parsePart = function (str) {
    var parts = Data_Function.apply(Data_List.fromFoldable(Data_Foldable.foldableArray))(Data_Function.apply(Data_String.split("&"))(Data_String.drop(1)(str)));
    var part2tuple = function (input) {
        var keyVal = Data_String.split("=")(input);
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Function.apply(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe))(Data_Array.length(keyVal) <= 2))(function () {
            return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(Data_Array.head(keyVal)))(Data_Array.index(keyVal)(1));
        });
    };
    return Data_Maybe.fromMaybe(new Routing_Types.Path(str))(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Function.apply(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe))(Data_String.take(1)(str) === "?"))(function () {
        return Data_Function.apply(Data_Functor.map(Data_Maybe.functorMaybe)(function ($0) {
            return Routing_Types.Query.create(Data_Map.fromList(Data_Ord.ordString)($0));
        }))(Data_Traversable.traverse(Data_List.traversableList)(Data_Maybe.applicativeMaybe)(part2tuple)(parts));
    }));
};
var parse = function (decoder) {
    return function (hash) {
        return Data_Function.apply(Data_Functor.map(Data_List.functorList)(function ($1) {
            return parsePart(decoder($1));
        }))(Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_String.split("/")(hash)));
    };
};
module.exports = {
    parse: parse
};
