// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Data_Functor = require("../Data.Functor");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Control_Apply = require("../Control.Apply");
var Data_Function = require("../Data.Function");
var Control_Applicative = require("../Control.Applicative");
var Compose = (function () {
    function Compose(value0) {
        this.value0 = value0;
    };
    Compose.create = function (value0) {
        return new Compose(value0);
    };
    return Compose;
})();
var decompose = function (v) {
    return v.value0;
};
var functorCompose = function (dictFunctor) {
    return function (dictFunctor1) {
        return new Data_Functor.Functor(function (f) {
            return function ($15) {
                return Compose.create(Data_Functor.map(dictFunctor)(Data_Functor.map(dictFunctor1)(f))(decompose($15)));
            };
        });
    };
};
var applyCompose = function (dictApply) {
    return function (dictApply1) {
        return new Control_Apply.Apply(function () {
            return functorCompose(dictApply["__superclass_Data.Functor.Functor_0"]())(dictApply1["__superclass_Data.Functor.Functor_0"]());
        }, function (v) {
            return function (v1) {
                return Data_Function.apply(Compose.create)(Control_Apply.apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Control_Apply.apply(dictApply1))(v.value0))(v1.value0));
            };
        });
    };
};
var applicativeCompose = function (dictApplicative) {
    return function (dictApplicative1) {
        return new Control_Applicative.Applicative(function () {
            return applyCompose(dictApplicative["__superclass_Control.Apply.Apply_0"]())(dictApplicative1["__superclass_Control.Apply.Apply_0"]());
        }, function ($16) {
            return Compose.create(Control_Applicative.pure(dictApplicative)(Control_Applicative.pure(dictApplicative1)($16)));
        });
    };
};
module.exports = {
    Compose: Compose, 
    decompose: decompose, 
    functorCompose: functorCompose, 
    applyCompose: applyCompose, 
    applicativeCompose: applicativeCompose
};
