// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Data_Maybe = require("../Data.Maybe");
var Data_NonEmpty = require("../Data.NonEmpty");
var CSS_Property = require("../CSS.Property");
var CSS_String = require("../CSS.String");
var CSS_Stylesheet = require("../CSS.Stylesheet");
var Data_Function = require("../Data.Function");
var Data_Semigroup = require("../Data.Semigroup");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var WOFF = (function () {
    function WOFF() {

    };
    WOFF.value = new WOFF();
    return WOFF;
})();
var WOFF2 = (function () {
    function WOFF2() {

    };
    WOFF2.value = new WOFF2();
    return WOFF2;
})();
var TrueType = (function () {
    function TrueType() {

    };
    TrueType.value = new TrueType();
    return TrueType;
})();
var OpenType = (function () {
    function OpenType() {

    };
    OpenType.value = new OpenType();
    return OpenType;
})();
var EmbeddedOpenType = (function () {
    function EmbeddedOpenType() {

    };
    EmbeddedOpenType.value = new EmbeddedOpenType();
    return EmbeddedOpenType;
})();
var SVG = (function () {
    function SVG() {

    };
    SVG.value = new SVG();
    return SVG;
})();
var FontFaceSrcUrl = (function () {
    function FontFaceSrcUrl(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    FontFaceSrcUrl.create = function (value0) {
        return function (value1) {
            return new FontFaceSrcUrl(value0, value1);
        };
    };
    return FontFaceSrcUrl;
})();
var FontFaceSrcLocal = (function () {
    function FontFaceSrcLocal(value0) {
        this.value0 = value0;
    };
    FontFaceSrcLocal.create = function (value0) {
        return new FontFaceSrcLocal(value0);
    };
    return FontFaceSrcLocal;
})();
var formatName = function (v) {
    if (v instanceof WOFF) {
        return "woff";
    };
    if (v instanceof WOFF2) {
        return "woff2";
    };
    if (v instanceof TrueType) {
        return "truetype";
    };
    if (v instanceof OpenType) {
        return "opentype";
    };
    if (v instanceof EmbeddedOpenType) {
        return "embedded-opentype";
    };
    if (v instanceof SVG) {
        return "svg";
    };
    throw new Error("Failed pattern match at CSS.FontFace line 23, column 1 - line 24, column 1: " + [ v.constructor.name ]);
};
var valFontFaceSrc = new CSS_Property.Val(function (v) {
    if (v instanceof FontFaceSrcUrl) {
        return Data_Function.apply(CSS_String.fromString(CSS_Property.isStringValue))("url(" + (CSS_Property.quote(v.value0) + (")" + Data_Maybe.maybe("")(function (f$prime) {
            return " format(" + (formatName(f$prime) + ")");
        })(v.value1))));
    };
    if (v instanceof FontFaceSrcLocal) {
        return Data_Function.apply(CSS_String.fromString(CSS_Property.isStringValue))("local(" + (CSS_Property.quote(v.value0) + ")"));
    };
    throw new Error("Failed pattern match at CSS.FontFace line 34, column 3 - line 34, column 127: " + [ v.constructor.name ]);
});
var fontFaceSrc = Data_Function.apply(CSS_Stylesheet.key(CSS_Property.valNonEmpty(valFontFaceSrc)))(CSS_String.fromString(CSS_Property.isStringKey)("src"));
var fontFaceFamily = function ($7) {
    return CSS_Stylesheet.key(CSS_Property.valLiteral)(CSS_String.fromString(CSS_Property.isStringKey)("font-family"))(CSS_Property.Literal($7));
};
module.exports = {
    WOFF: WOFF, 
    WOFF2: WOFF2, 
    TrueType: TrueType, 
    OpenType: OpenType, 
    EmbeddedOpenType: EmbeddedOpenType, 
    SVG: SVG, 
    FontFaceSrcUrl: FontFaceSrcUrl, 
    FontFaceSrcLocal: FontFaceSrcLocal, 
    fontFaceFamily: fontFaceFamily, 
    fontFaceSrc: fontFaceSrc, 
    formatName: formatName, 
    valFontFaceSrc: valFontFaceSrc
};
