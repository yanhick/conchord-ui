// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Control_Lazy = require("../Control.Lazy");
var Control_Monad_State_Class = require("../Control.Monad.State.Class");
var Control_Monad_Trans = require("../Control.Monad.Trans");
var Control_MonadPlus = require("../Control.MonadPlus");
var Control_Plus = require("../Control.Plus");
var Data_Either = require("../Data.Either");
var Data_Identity = require("../Data.Identity");
var Data_Tuple = require("../Data.Tuple");
var Text_Parsing_Parser_Pos = require("../Text.Parsing.Parser.Pos");
var Data_Show = require("../Data.Show");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Eq = require("../Data.Eq");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Functor = require("../Data.Functor");
var Data_Function = require("../Data.Function");
var Control_Apply = require("../Control.Apply");
var Control_Monad = require("../Control.Monad");
var Control_Applicative = require("../Control.Applicative");
var Control_Alt = require("../Control.Alt");
var Control_Bind = require("../Control.Bind");
var Control_Alternative = require("../Control.Alternative");
var Control_MonadZero = require("../Control.MonadZero");
var Data_Unit = require("../Data.Unit");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var ParseError = (function () {
    function ParseError(value0) {
        this.value0 = value0;
    };
    ParseError.create = function (value0) {
        return new ParseError(value0);
    };
    return ParseError;
})();
var PState = (function () {
    function PState(value0) {
        this.value0 = value0;
    };
    PState.create = function (value0) {
        return new PState(value0);
    };
    return PState;
})();
var ParserT = function (x) {
    return x;
};
var unParserT = function (v) {
    return v;
};
var showParseError = new Data_Show.Show(function (v) {
    return "ParseError { message: " + (v.value0.message + (", position: " + (Data_Show.show(Text_Parsing_Parser_Pos.showPosition)(v.value0.position) + " }")));
});
var runParserT = function (dictMonad) {
    return function (s) {
        return function (p) {
            return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(unParserT(p)(s))(function (v) {
                return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v.result);
            });
        };
    };
};
var runParser = function (s) {
    return function ($65) {
        return Data_Identity.runIdentity(runParserT(Data_Identity.monadIdentity)(new PState({
            input: s, 
            position: Text_Parsing_Parser_Pos.initialPos
        }))($65));
    };
};
var parseFailed = function (s) {
    return function (pos) {
        return function (message) {
            return {
                input: s, 
                consumed: false, 
                result: new Data_Either.Left(new ParseError({
                    message: message, 
                    position: pos
                })), 
                position: pos
            };
        };
    };
};
var monadTransParserT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
    return function (m) {
        return Data_Function.apply(ParserT)(function (v) {
            return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(function (a) {
                return {
                    input: v.value0.input, 
                    consumed: false, 
                    result: new Data_Either.Right(a), 
                    position: v.value0.position
                };
            })(m);
        });
    };
});
var lazyParserT = new Control_Lazy.Lazy(function (f) {
    return Data_Function.apply(ParserT)(function (s) {
        return unParserT(f(Data_Unit.unit))(s);
    });
});
var functorParserT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (p) {
            var f$prime = function (o) {
                return {
                    input: o.input, 
                    result: Data_Functor.map(Data_Either.functorEither)(f)(o.result), 
                    consumed: o.consumed, 
                    position: o.position
                };
            };
            return Data_Function.apply(ParserT)(function (s) {
                return Data_Functor.map(dictFunctor)(f$prime)(unParserT(p)(s));
            });
        };
    });
};
var fail = function (dictMonad) {
    return function (message) {
        return Data_Function.apply(ParserT)(function (v) {
            return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(parseFailed(v.value0.input)(v.value0.position)(message));
        });
    };
};
var eqParseError = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return v.value0.message === v1.value0.message && Data_Eq.eq(Text_Parsing_Parser_Pos.eqPosition)(v.value0.position)(v1.value0.position);
    };
});
var consume = function (dictMonad) {
    return Data_Function.apply(ParserT)(function (v) {
        return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())({
            consumed: true, 
            input: v.value0.input, 
            result: new Data_Either.Right(Data_Unit.unit), 
            position: v.value0.position
        });
    });
};
var monadParserT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeParserT(dictMonad);
    }, function () {
        return bindParserT(dictMonad);
    });
};
var bindParserT = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyParserT(dictMonad);
    }, function (p) {
        return function (f) {
            var updateConsumedFlag = function (c) {
                return function (o) {
                    return {
                        input: o.input, 
                        consumed: c || o.consumed, 
                        result: o.result, 
                        position: o.position
                    };
                };
            };
            return Data_Function.apply(ParserT)(function (s) {
                return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(unParserT(p)(s))(function (o) {
                    if (o.result instanceof Data_Either.Left) {
                        return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())({
                            input: o.input, 
                            result: new Data_Either.Left(o.result.value0), 
                            consumed: o.consumed, 
                            position: o.position
                        });
                    };
                    if (o.result instanceof Data_Either.Right) {
                        return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(updateConsumedFlag(o.consumed))(unParserT(f(o.result.value0))(new PState({
                            input: o.input, 
                            position: o.position
                        })));
                    };
                    throw new Error("Failed pattern match at Text.Parsing.Parser line 79, column 5 - line 81, column 117: " + [ o.result.constructor.name ]);
                });
            });
        };
    });
};
var applyParserT = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
    }, Control_Monad.ap(monadParserT(dictMonad)));
};
var applicativeParserT = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyParserT(dictMonad);
    }, function (a) {
        return Data_Function.apply(ParserT)(function (v) {
            return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())({
                input: v.value0.input, 
                result: new Data_Either.Right(a), 
                consumed: false, 
                position: v.value0.position
            });
        });
    });
};
var monadStateParserT = function (dictMonad) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadParserT(dictMonad);
    }, function (f) {
        return Data_Function.apply(ParserT)(function (v) {
            return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))((function () {
                var $57 = f(v.value0.input);
                return {
                    input: $57.value1, 
                    consumed: false, 
                    result: new Data_Either.Right($57.value0), 
                    position: v.value0.position
                };
            })());
        });
    });
};
var altParserT = function (dictMonad) {
    return new Control_Alt.Alt(function () {
        return functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
    }, function (p1) {
        return function (p2) {
            return Data_Function.apply(ParserT)(function (s) {
                return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(unParserT(p1)(s))(function (o) {
                    if (o.result instanceof Data_Either.Left && !o.consumed) {
                        return unParserT(p2)(s);
                    };
                    return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(o);
                });
            });
        };
    });
};
var plusParserT = function (dictMonad) {
    return new Control_Plus.Plus(function () {
        return altParserT(dictMonad);
    }, fail(dictMonad)("No alternative"));
};
var alternativeParserT = function (dictMonad) {
    return new Control_Alternative.Alternative(function () {
        return applicativeParserT(dictMonad);
    }, function () {
        return plusParserT(dictMonad);
    });
};
var monadZeroParserT = function (dictMonad) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeParserT(dictMonad);
    }, function () {
        return monadParserT(dictMonad);
    });
};
var monadPlusParserT = function (dictMonad) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroParserT(dictMonad);
    });
};
module.exports = {
    PState: PState, 
    ParseError: ParseError, 
    ParserT: ParserT, 
    consume: consume, 
    fail: fail, 
    parseFailed: parseFailed, 
    runParser: runParser, 
    runParserT: runParserT, 
    unParserT: unParserT, 
    showParseError: showParseError, 
    eqParseError: eqParseError, 
    functorParserT: functorParserT, 
    applyParserT: applyParserT, 
    applicativeParserT: applicativeParserT, 
    altParserT: altParserT, 
    plusParserT: plusParserT, 
    alternativeParserT: alternativeParserT, 
    bindParserT: bindParserT, 
    monadParserT: monadParserT, 
    monadZeroParserT: monadZeroParserT, 
    monadPlusParserT: monadPlusParserT, 
    monadTransParserT: monadTransParserT, 
    monadStateParserT: monadStateParserT, 
    lazyParserT: lazyParserT
};
