// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Data_Foreign = require("../Data.Foreign");
var Data_Foreign_Class = require("../Data.Foreign.Class");
var Data_Either = require("../Data.Either");
var Data_String_Regex = require("../Data.String.Regex");
var Data_Default = require("../Data.Default");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Data_Show = require("../Data.Show");
var Data_Function = require("../Data.Function");
var Data_Semiring = require("../Data.Semiring");
var Http = (function () {
    function Http() {

    };
    Http.value = new Http();
    return Http;
})();
var Https = (function () {
    function Https() {

    };
    Https.value = new Https();
    return Https;
})();
var ALL = (function () {
    function ALL() {

    };
    ALL.value = new ALL();
    return ALL;
})();
var GET = (function () {
    function GET() {

    };
    GET.value = new GET();
    return GET;
})();
var POST = (function () {
    function POST() {

    };
    POST.value = new POST();
    return POST;
})();
var PUT = (function () {
    function PUT() {

    };
    PUT.value = new PUT();
    return PUT;
})();
var DELETE = (function () {
    function DELETE() {

    };
    DELETE.value = new DELETE();
    return DELETE;
})();
var OPTIONS = (function () {
    function OPTIONS() {

    };
    OPTIONS.value = new OPTIONS();
    return OPTIONS;
})();
var HEAD = (function () {
    function HEAD() {

    };
    HEAD.value = new HEAD();
    return HEAD;
})();
var TRACE = (function () {
    function TRACE() {

    };
    TRACE.value = new TRACE();
    return TRACE;
})();
var CustomMethod = (function () {
    function CustomMethod(value0) {
        this.value0 = value0;
    };
    CustomMethod.create = function (value0) {
        return new CustomMethod(value0);
    };
    return CustomMethod;
})();
var CookieOptions = function (x) {
    return x;
};
var RoutePattern = {};
var RequestParam = {};
var showProtocol = new Data_Show.Show(function (v) {
    if (v instanceof Http) {
        return "http";
    };
    if (v instanceof Https) {
        return "https";
    };
    throw new Error("Failed pattern match at Node.Express.Types line 29, column 5 - line 30, column 5: " + [ v.constructor.name ]);
});
var showMethod = new Data_Show.Show(function (v) {
    if (v instanceof ALL) {
        return "all";
    };
    if (v instanceof GET) {
        return "get";
    };
    if (v instanceof POST) {
        return "post";
    };
    if (v instanceof PUT) {
        return "put";
    };
    if (v instanceof DELETE) {
        return "delete";
    };
    if (v instanceof OPTIONS) {
        return "options";
    };
    if (v instanceof HEAD) {
        return "head";
    };
    if (v instanceof TRACE) {
        return "trace";
    };
    if (v instanceof CustomMethod) {
        return v.value0;
    };
    throw new Error("Failed pattern match at Node.Express.Types line 42, column 5 - line 43, column 5: " + [ v.constructor.name ]);
});
var routeRegex = RoutePattern;
var routePath = RoutePattern;
var requestParamString = RequestParam;
var requestParamNumber = RequestParam;
var isForeignProtocol = new Data_Foreign_Class.IsForeign(function (value) {
    var $5 = Data_Foreign.readString(value);
    if ($5 instanceof Data_Either.Right && $5.value0 === "http") {
        return new Data_Either.Right(Http.value);
    };
    if ($5 instanceof Data_Either.Right && $5.value0 === "https") {
        return new Data_Either.Right(Https.value);
    };
    return Data_Function.apply(Data_Either.Left.create)(new Data_Foreign.JSONError("Unknown protocol"));
});
var isForeignMethod = new Data_Foreign_Class.IsForeign(function (value) {
    var $8 = Data_Foreign.readString(value);
    if ($8 instanceof Data_Either.Right && $8.value0 === "GET") {
        return new Data_Either.Right(GET.value);
    };
    if ($8 instanceof Data_Either.Right && $8.value0 === "POST") {
        return new Data_Either.Right(POST.value);
    };
    if ($8 instanceof Data_Either.Right && $8.value0 === "PUT") {
        return new Data_Either.Right(PUT.value);
    };
    if ($8 instanceof Data_Either.Right && $8.value0 === "DELETE") {
        return new Data_Either.Right(DELETE.value);
    };
    if ($8 instanceof Data_Either.Right && $8.value0 === "OPTIONS") {
        return new Data_Either.Right(OPTIONS.value);
    };
    if ($8 instanceof Data_Either.Right && $8.value0 === "HEAD") {
        return new Data_Either.Right(HEAD.value);
    };
    if ($8 instanceof Data_Either.Right && $8.value0 === "TRACE") {
        return new Data_Either.Right(TRACE.value);
    };
    if ($8 instanceof Data_Either.Right) {
        return Data_Function.apply(Data_Either.Right.create)(new CustomMethod($8.value0));
    };
    return Data_Function.apply(Data_Either.Left.create)(new Data_Foreign.JSONError("Unknown HTTP method"));
});
var defaultCookieOptions = new Data_Default.Default((function () {
    var oneYear = (((365 * 24 | 0) * 60 | 0) * 60 | 0) * 1000 | 0;
    return {
        maxAge: oneYear, 
        signed: false, 
        path: "/"
    };
})());
module.exports = {
    CookieOptions: CookieOptions, 
    ALL: ALL, 
    GET: GET, 
    POST: POST, 
    PUT: PUT, 
    DELETE: DELETE, 
    OPTIONS: OPTIONS, 
    HEAD: HEAD, 
    TRACE: TRACE, 
    CustomMethod: CustomMethod, 
    Http: Http, 
    Https: Https, 
    RequestParam: RequestParam, 
    RoutePattern: RoutePattern, 
    showProtocol: showProtocol, 
    isForeignProtocol: isForeignProtocol, 
    showMethod: showMethod, 
    isForeignMethod: isForeignMethod, 
    routePath: routePath, 
    routeRegex: routeRegex, 
    requestParamString: requestParamString, 
    requestParamNumber: requestParamNumber, 
    defaultCookieOptions: defaultCookieOptions
};
