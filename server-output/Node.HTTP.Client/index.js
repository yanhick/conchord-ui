// Generated by psc version 0.9.3
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Data_Foreign = require("../Data.Foreign");
var Data_Options = require("../Data.Options");
var Data_StrMap = require("../Data.StrMap");
var Node_HTTP = require("../Node.HTTP");
var Node_Stream = require("../Node.Stream");
var Node_URL = require("../Node.URL");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var RequestHeaders = function (x) {
    return x;
};
var statusMessage = function ($4) {
    return (function (v) {
        return v.statusMessage;
    })(Unsafe_Coerce.unsafeCoerce($4));
};
var statusCode = function ($5) {
    return (function (v) {
        return v.statusCode;
    })(Unsafe_Coerce.unsafeCoerce($5));
};
var responseHeaders = function ($6) {
    return (function (v) {
        return v.headers;
    })(Unsafe_Coerce.unsafeCoerce($6));
};
var responseAsStream = Unsafe_Coerce.unsafeCoerce;
var requestFromURI = function ($7) {
    return $foreign.requestImpl(Data_Foreign.toForeign(Node_URL.parse($7)));
};
var requestAsStream = Unsafe_Coerce.unsafeCoerce;
var request = function ($8) {
    return $foreign.requestImpl(Data_Options.options($8));
};
var protocol = Data_Options.opt("protocol");
var port = Data_Options.opt("port");
var path = Data_Options.opt("path");
var method = Data_Options.opt("method");
var httpVersion = function ($9) {
    return (function (v) {
        return v.httpVersion;
    })(Unsafe_Coerce.unsafeCoerce($9));
};
var hostname = Data_Options.opt("hostname");
var headers = Data_Options.opt("headers");
var auth = Data_Options.opt("auth");
module.exports = {
    RequestHeaders: RequestHeaders, 
    auth: auth, 
    headers: headers, 
    hostname: hostname, 
    httpVersion: httpVersion, 
    method: method, 
    path: path, 
    port: port, 
    protocol: protocol, 
    request: request, 
    requestAsStream: requestAsStream, 
    requestFromURI: requestFromURI, 
    responseAsStream: responseAsStream, 
    responseHeaders: responseHeaders, 
    statusCode: statusCode, 
    statusMessage: statusMessage, 
    setTimeout: $foreign.setTimeout
};
